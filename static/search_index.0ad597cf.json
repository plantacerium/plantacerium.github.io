[{"title":"About","content":"#\n\nPlantacerium, Senior Software Engineer, I am writing in deep articles and\nenhancing my mastery exponentially at Rust, Python, Reactjs.\n\n * Highlighted Skills: Git, GitHub, Github Actions, Linux Commands, VSCode,\n   Helix IDE, Rust, Cargo, Toml, Python, PIP, Anaconda, Javascript, Typescript,\n   HTML, CSS, SASS, Reactjs, Nextjs, Tanstack, Zustand, Redux, React Testing,\n   Astro, Gsap, Animejs, Bootstrap, Material UI, Radix UI, D3, Nodejs, API Rest,\n   Swagger, GraphQL, Better Auth, Postman, Debug, Web Deployments, Docker,\n   Podman.\n * Based in Europe.\n * Remote worker.\n * Full time position.\n\n\nPortfolio#\n\nThis is my digital star guide, to nurture and growth the flame of wonder and\nknowledge for software engineering.\n\n\nContact Plantacerium#\n\nScience Fiction Writing Community Pandacinamics Discord invitation","routePath":"/blog-software-engineer/1-index","lang":"","toc":[{"text":"Portfolio","id":"portfolio","depth":2,"charIndex":602},{"text":"Contact Plantacerium","id":"contact-plantacerium","depth":2,"charIndex":729}],"domain":"","frontmatter":{},"version":""},{"title":"AST Grep","content":"Guide to Using AST Grep#\n\n\nIntroduction#\n\nast-grep is a powerful, command-line tool for searching and rewriting code based\non its abstract syntax tree (AST). This allows for more precise and powerful\ncode modifications than traditional text-based search and replace tools.\n\nThis guide provides an overview of ast-grep and how to use it in a production\nenvironment, covering common, real-world, and edge use cases.\n\n\nKey Concepts#\n\n * Abstract Syntax Tree (AST): An AST is a tree representation of the syntactic\n   structure of source code. ast-grep uses ASTs to understand the code's\n   structure, rather than just treating it as plain text.\n\n * Patterns: You can write patterns that look like the code you want to find.\n   These patterns can include wildcards to match different parts of the code.\n\n * Rewriting: ast-grep can rewrite code by replacing the matched patterns with a\n   new code structure.\n\n\nInstallation#\n\nYou can install ast-grep using various package managers:\n\n\nUsing npm#\n\nnpm install -g @ast-grep/cli\n\n\n\nUsing pip#\n\npip install ast-grep-cli\n\n\n\nUsing Homebrew#\n\nbrew install ast-grep\n\n\n\nReal-World Use Cases#\n\nHere are some real-world examples of how ast-grep can be used in a production\nenvironment:\n\n\n1. Large-Scale Refactoring#\n\nWhen a library or API changes, you often need to update your entire codebase.\nast-grep can automate this process.\n\nScenario: You are upgrading a testing library and need to replace the old\nassertion style with a new one.\n\nOld code:\n\nassert.equal(actual, expected);\n\n\nNew code:\n\nexpect(actual).toEqual(expected);\n\n\nast-grep command:\n\nsg -p 'assert.equal($A, $B)' -r 'expect($A).toEqual($B)' -l js\n\n\n\n2. Enforcing Code Standards#\n\nYou can use ast-grep to enforce coding standards and best practices across your\norganization.\n\nScenario: You want to ensure that all fetch calls have a timeout and appropriate\nerror handling.\n\nPattern to find fetch calls without a timeout:\n\n# rules/no-fetch-without-timeout.yml\nid: no-fetch-without-timeout\nlanguage: JavaScript\nrule:\n  pattern: fetch($URL)\n  not:\n    has:\n      pattern: fetch($URL, { timeout: $T })\n\n\nast-grep command to lint:\n\nsg scan -r rules/no-fetch-without-timeout.yml\n\n\n\n3. Security Vulnerability Patching#\n\nast-grep can be used to find and patch security vulnerabilities at scale.\n\nScenario: A security vulnerability is discovered in a commonly used function,\nand you need to replace it with a safer alternative.\n\nVulnerable code:\n\nconst html = unsafeFunction(userInput);\n\n\nPatched code:\n\nconst html = safeFunction(userInput);\n\n\nast-grep command:\n\nsg -p 'unsafeFunction($ARG)' -r 'safeFunction($ARG)' -l js\n\n\n\nCommon Use Cases#\n\nHere are some common use cases for ast-grep:\n\n * API Migration: When a framework or library that you use updates its API, you\n   can use ast-grep to automatically update your code.\n\n * Code Cleanup: Remove deprecated functions, unused variables, and other code\n   smells.\n\n * Boilerplate Generation: Automate the creation of boilerplate code for new\n   components or modules.\n\n\nEdge Use Cases#\n\nHere are some advanced and less-common use cases for ast-grep:\n\n\n1. Analyzing Code for Complex Patterns#\n\nYou can use ast-grep to find complex code patterns that might be difficult to\nexpress with other tools.\n\nScenario: Find all functions that are called with a specific argument and then\nimmediately awaited.\n\nPattern:\n\nsg -p 'await $FN($ARG)' -l js\n\n\n\n2. Multi-language Support#\n\nast-grep is a polyglot tool and it can be used on a variety of different\nprogramming languages.\n\nScenario: Rewrite Python f-strings to use the str.format() method.\n\nast-grep command:\n\nsg -p 'f\"Hello, {$NAME}\"' -r '\"Hello, {}\".format($NAME)' -l py\n\n\n\n3. Custom#\n\nLinting Rules\n\nYou can create your own custom linting rules to enforce project-specific\nconventions.\n\nScenario: Ensure that all database queries are made through a specific helper\nfunction.\n\nPattern to find direct database queries:\n\n# rules/no-direct-db-queries.yml\nid: no-direct-db-queries\nlanguage: Python\nrule:\n  pattern: db.execute($QUERY)\n\n\nast-grep command:\n\nsg scan -r rules/no-direct-db-queries.yml\n\n\n\nConclusion#\n\nast-grep is a versatile and powerful tool that can significantly improve your\nworkflow for code maintenance, refactoring, and analysis. By understanding its\ncore concepts and exploring its various use cases, you can leverage ast-grep to\nwrite cleaner, safer, and more consistent code.","routePath":"/blog-software-engineer/Backend/ast-grep","lang":"","toc":[{"text":"Introduction","id":"introduction","depth":2,"charIndex":26},{"text":"Key Concepts","id":"key-concepts","depth":2,"charIndex":415},{"text":"Installation","id":"installation","depth":2,"charIndex":905},{"text":"Real-World Use Cases","id":"real-world-use-cases","depth":2,"charIndex":1105},{"text":"1. Large-Scale Refactoring","id":"1-large-scale-refactoring","depth":3,"charIndex":1221},{"text":"2. Enforcing Code Standards","id":"2-enforcing-code-standards","depth":3,"charIndex":1649},{"text":"3. Security Vulnerability Patching","id":"3-security-vulnerability-patching","depth":3,"charIndex":2174},{"text":"Common Use Cases","id":"common-use-cases","depth":2,"charIndex":2614},{"text":"Edge Use Cases","id":"edge-use-cases","depth":2,"charIndex":3011},{"text":"1. Analyzing Code for Complex Patterns","id":"1-analyzing-code-for-complex-patterns","depth":3,"charIndex":3093},{"text":"2. Multi-language Support","id":"2-multi-language-support","depth":3,"charIndex":3383},{"text":"3. Custom","id":"3-custom","depth":3,"charIndex":3661},{"text":"Conclusion","id":"conclusion","depth":2,"charIndex":4083}],"domain":"","frontmatter":{"title":"AST Grep"},"version":""},{"title":"Docusaurus","content":"#\n\n\nSyntax Highlghting in Docusaurus:#\n\npnpm install prismjs\n\n\nAt docusaurus config.\n\n      prism: {\n        theme: prismThemes.github,\n        darkTheme: prismThemes.vsDark,\n        additionalLanguages: ['bash'],\n      },\n\n\nIn additionalLanguages: ['bash'] add languages to highlight.\n\n\nResources:#\n\n * https://docusaurus.io/docs/markdown-features/code-blocks#supported-languages\n * https://prismjs.com/#supported-languages","routePath":"/blog-software-engineer/Backend/docusaurus","lang":"","toc":[{"text":"Syntax Highlghting in Docusaurus:","id":"syntax-highlghting-in-docusaurus","depth":2,"charIndex":3},{"text":"Resources:","id":"resources","depth":2,"charIndex":287}],"domain":"","frontmatter":{"title":"Docusaurus"},"version":""},{"title":"Gitea","content":"#\n\n\nSteps#\n\n * Create ssh key.\n * Execute container.\n * Copy public ssh key into gitea configuration, add ssh key section.\n * Setup your ssh config.\n * Test connection.\n * Execute repository operations from your local machine.\n\n\nDocker Compose File execute with POdman#\n\nversion: \"3\"\n\nnetworks:\n  gitea:\n    external: false\n\nservices:\n  server:\n    image: docker.gitea.com/gitea:latest\n    container_name: gitea\n    environment:\n      - USER_UID=1000\n      - USER_GID=1000\n    restart: always\n    networks:\n      - gitea\n    volumes:\n      - ./gitea:/data\n      - /etc/timezone:/etc/timezone:ro\n      - /etc/localtime:/etc/localtime:ro\n    ports:\n      - \"<YOUR_PORT>:3000\"\n      - \"<YOUR_PORT>:22\"\n\n\n\nSSH Config for Local Machine Connecting to Gitea with CLoudflare Auth#\n\nHost <DOMAIN GITEA SERVER>\n  HostName <DOMAN GITEA SSH SERVER>\n  IdentityFile ~/.ssh/<THE_FILE_NANME_ASSOCIATED_WITH_GITEA_SSH_KEY>\n\n\n\nTest SSH Connection#\n\nssh -T <DOMAIN GITEA SERVER>\n\n\n\nRespository Operations#\n\nCreate a repository and clone it with SSH.","routePath":"/blog-software-engineer/Backend/gitea","lang":"","toc":[{"text":"Steps","id":"steps","depth":2,"charIndex":3},{"text":"Docker Compose File execute with POdman","id":"docker-compose-file-execute-with-podman","depth":2,"charIndex":228},{"text":"SSH Config for Local Machine Connecting to Gitea with CLoudflare Auth","id":"ssh-config-for-local-machine-connecting-to-gitea-with-cloudflare-auth","depth":2,"charIndex":701},{"text":"Test SSH Connection","id":"test-ssh-connection","depth":2,"charIndex":908},{"text":"Respository Operations","id":"respository-operations","depth":2,"charIndex":962}],"domain":"","frontmatter":{"title":"Gitea"},"version":""},{"title":"Local DevDocs","content":"#\n\nYou run a podman container that executes the Freecodecamp repository DevDocs\nimage for API Browse locally different technology documentations.\n\n\nRepository.#\n\nRepository Freecodecamp Devdocs\n\n\nRun command.#\n\npodman run --name devdocs -d -p 9292:9292 ghcr.io/freecodecamp/devdocs:latest\n\n\n\nInstructions.#\n\n * Access to localhost:9292\n * Enable your documentation.\n * Install your documentation.\n * Backup data with export.\n\n\nSample Export Data#\n\n{\"docs\":\"astro/axios/git/gnu_make/go/html/http/javascript/node/npm/python~3.13/react/redux/rust/zig\"}\n","routePath":"/blog-software-engineer/Backend/local-devdocs","lang":"","toc":[{"text":"Repository.","id":"repository","depth":2,"charIndex":147},{"text":"Run command.","id":"run-command","depth":2,"charIndex":195},{"text":"Instructions.","id":"instructions","depth":2,"charIndex":291},{"text":"Sample Export Data","id":"sample-export-data","depth":2,"charIndex":426}],"domain":"","frontmatter":{"title":"Local DevDocs"},"version":""},{"title":"Meshtastic","content":"#\n\nOff grid long range communications.\n\n * Meshtastic Docs\n * Spanish Meshtastic Docs\n * Device: T-Deck with integrated screen and keyboard. SenseCAP T1000-E work\n   with phone.","routePath":"/blog-software-engineer/Backend/meshtastic","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"title":"Podman","content":"Podman Overview#\n\nPodman is an OCI compliant container management tool able to run rootless\ncontainers. Managing containers without root privileges as a normal use. Podman\naddress security concerns from previous container tools as docker.\n\n\nLinks Resources#\n\nPodman\n\n\nInstall#\n\nsudo dnf -y install podman\n\n\n\nPodman desktop#\n\nflatpak install flathub io.podman_desktop.PodmanDesktop\n# Run podman desktop\nflatpak run io.podman_desktop.PodmanDesktop\n\n\n\nSample command#\n\npodman images\n\n\n\nContainer registries#\n\nDefault configuration:\n\n * quay.io\n * docker.io Find the configuration here\n\n/etc/containers/registries.conf\n\n\nAdditional tools#\n\nBuildah Build containers images.\n\nSkopeo Analyze images before pulling them\n\nYouki Container runtime written in Rust","routePath":"/blog-software-engineer/Backend/podman","lang":"","toc":[{"text":"Podman Overview","id":"podman-overview","depth":2,"charIndex":-1},{"text":"Links Resources","id":"links-resources","depth":2,"charIndex":240},{"text":"Install","id":"install","depth":2,"charIndex":267},{"text":"Podman desktop","id":"podman-desktop","depth":2,"charIndex":307},{"text":"Sample command","id":"sample-command","depth":2,"charIndex":448},{"text":"Container registries","id":"container-registries","depth":2,"charIndex":482},{"text":"Additional tools","id":"additional-tools","depth":2,"charIndex":616}],"domain":"","frontmatter":{"title":"Podman"},"version":""},{"title":"Sourcebot","content":"#\n\n\nDescription.#\n\nSourcebot is a self-hosted platform that helps humans and agents answer\nquestions about your code.\n\n * SourceBot Dev Web\n * Sourcebot Repository\n\n\nRun Sourcebot.#\n\nCreate a /SourceBot folder, and execute the next command:\n\nnano config.json\n\n\nEdit, write and save the file:\n\n//config.json\n{\n    \"$schema\": \"https://raw.githubusercontent.com/sourcebot-dev/sourcebot/main/schemas/v3/index.json\",\n    \"connections\": {\n        // Comments are supported\n        \"repos\": {\n            \"type\": \"github\",\n            \"repos\": [\n                \"sourcebot-dev/sourcebot\",\n                \"plantacerium/plantacerium.github.io\"\n            ]\n        }\n    }\n}\n\n\nIn the same folder where You created config.json, execute the next command:\n\npodman run -p 3000:3000 --pull=always --rm -v $(pwd):/data:z -e CONFIG_PATH=/data/config.json --name sourcebot ghcr.io/sourcebot-dev/sourcebot:latest\n\n\n * Originally the command use docker, here You use podman.\n * To allow podman to create the volume with folders and files add ':z' to\n   transform from '-v $(pwd):/data' to '-v $(pwd):/data:z'.\n * This allows Podman to relabel the file or directory with the appropriate\n   SELinux context, enabling access. This step typically needs to be done only\n   once; after relabeling, subsequent runs can omit the :z flag\n * Access to localhost:3000\n * Follow wizard set up.\n\nYou are all set and ready to use Sourcebot Dev.\n\n\nCommand to Spin SourceBot Dev Next Time#\n\npodman run -d -p 3000:3000 --pull=always --rm -v $(pwd):/data -e CONFIG_PATH=/data/config.json --name sourcebot ghcr.io/sourcebot-dev/sourcebot:latest\n\n\n * Notice that ':z' is not in the command of the second execution.\n * You run the container in detach mode fo ease of use.\n\nNow You completed the Steps.","routePath":"/blog-software-engineer/Backend/sourcebot-dev","lang":"","toc":[{"text":"Description.","id":"description","depth":2,"charIndex":3},{"text":"Run Sourcebot.","id":"run-sourcebot","depth":2,"charIndex":165},{"text":"Command to Spin SourceBot Dev Next Time","id":"command-to-spin-sourcebot-dev-next-time","depth":2,"charIndex":1415}],"domain":"","frontmatter":{"title":"Sourcebot"},"version":""},{"title":"Calendar","content":"Intro#\n\n * Use from the terminal with broot, read thread List of Resources\n * Execute: nano calendar-next-ten-years.sh\n * execute: sh calendar-next-ten-years\n * It wil create a folder structure for your next ten years with twelve months,\n   the according days, and 24 md files one per hour inside the folder of the\n   day, enabling you to add events to your calendar.\n\n\nCalendar Script SH#\n\n# calendar-next-ten-years.sh\n#!/bin/bash\n\n# Get the current year\nCURRENT_YEAR=$(date +%Y)\nEND_YEAR=$((CURRENT_YEAR + 10))\n\nfor YEAR in $(seq $CURRENT_YEAR $END_YEAR); do\n    for MONTH in $(seq -w 01 12); do\n        for DAY in $(seq -w 01 31); do\n            # Calculate the date\n            DATE=\"$YEAR-$MONTH-$DAY\"\n            # Check if the date is valid\n            if date -d \"$DATE\" >/dev/null 2>&1; then\n                # Get the day of the week (e.g., Monday)\n                DAY_OF_WEEK=$(date -d \"$DATE\" +%A)\n                # Create the directory structure\n                mkdir -p \"$YEAR/$MONTH/$DAY-$DAY_OF_WEEK\"\n                for HOUR in $(seq -w 00 23)\n                do\n                    # Create the twenty four md files, one per hour.\n                    touch \"$YEAR/$MONTH/$DAY-$DAY_OF_WEEK/$HOUR.md\"\n                done\n            fi\n        done\n    done\ndone\n\n\n\n\nStatus#\n\nCompleted.","routePath":"/blog-software-engineer/Built Softwares/calendar","lang":"","toc":[{"text":"Intro","id":"intro","depth":2,"charIndex":-1},{"text":"Calendar Script SH","id":"calendar-script-sh","depth":2,"charIndex":369},{"text":"Status","id":"status","depth":2,"charIndex":1282}],"domain":"","frontmatter":{"title":"Calendar"},"version":""},{"title":"Circle Images","content":"#\n\nThis script uses ImageMagick, a powerful command-line image processing tool. You\nmust have it installed for this script to work.\n\n\nThe Bash Script#\n\nYou can save this code as circularize.sh.\n\n#!/bin/bash\n\n# A script to convert an image into a circular one with a transparent background.\n#\n# DEPENDENCY: ImageMagick (must be installed)\n# USAGE: ./circularize.sh /path/to/your/image.jpg\n\n# --- Configuration ---\n# Use 'magick' (ImageMagick v7+) or 'convert' (v6 or legacy)\n# By default, we check for 'magick' first.\nif command -v magick &> /dev/null; then\n    IM_COMMAND=\"magick\"\nelif command -v convert &> /dev/null; then\n    IM_COMMAND=\"convert\"\nelse\n    echo \"Error: ImageMagick is not installed.\" >&2\n    echo \"Please install ImageMagick (https://imagemagick.org) to use this script.\" >&2\n    exit 1\nfi\n\n# --- Input Validation ---\nif [ -z \"$1\" ]; then\n    echo \"Usage: $0 <input_image>\" >&2\n    exit 1\nfi\n\nINPUT_FILE=\"$1\"\n\nif [ ! -f \"$INPUT_FILE\" ]; then\n    echo \"Error: File not found: $INPUT_FILE\" >&2\n    exit 1\nfi\n\n# --- File Naming ---\n# Get the input file's directory and base name\nDIRNAME=$(dirname -- \"$INPUT_FILE\")\nINPUT_BASENAME=$(basename -- \"$INPUT_FILE\")\n\n# Remove the old extension (e.g., .jpg, .png)\nFILENAME_NO_EXT=\"${INPUT_BASENAME%.*}\"\n\n# Define the output file path\nOUTPUT_FILE=\"${DIRNAME}/${FILENAME_NO_EXT}_circular.png\"\n\necho \"Processing '$INPUT_FILE'...\"\n\n# --- Get Image Dimensions ---\n# Get dimensions as a single \"widthxheight\" string\nDIMS=$($IM_COMMAND identify -format \"%wx%h\" \"$INPUT_FILE\")\n# Split into width and height\nWIDTH=$(echo $DIMS | cut -dx -f1)\nHEIGHT=$(echo $DIMS | cut -dx -f2)\n\n# Determine the smallest dimension to create a square crop\nif [ $WIDTH -lt $HEIGHT ]; then\n    SIZE=$WIDTH\nelse\n    SIZE=$HEIGHT\nfi\n\n# Calculate the center coordinate (half the size)\n# This is used for drawing the circle\nC=$(($SIZE / 2))\n\n# --- ImageMagick Command ---\n# This is the core logic\n$IM_COMMAND \"$INPUT_FILE\" \\\n    -alpha set \\\n    -gravity center \\\n    -crop ${SIZE}x${SIZE}+0+0 +repage \\\n    \\( \\\n        +clone \\\n        -channel A -evaluate set 0 \\\n        -fill white \\\n        -draw \"circle $C,$C $C,0\" \\\n    \\) \\\n    -compose DstIn \\\n    -composite \\\n    \"$OUTPUT_FILE\"\n\n# --- Final Check ---\nif [ $? -eq 0 ]; then\n    echo \"✅ Success! Circular image saved to: $OUTPUT_FILE\"\nelse\n    echo \"❌ Error: ImageMagick command failed.\" >&2\n    exit 1\nfi\n\n\n--------------------------------------------------------------------------------\n\n\nHow to Use It#\n\n 1. Install ImageMagick:\n    * Fedora/RHEL: sudo dnf install ImageMagick\n 2. Save the Script:\n    \n    Copy the code above and save it to a file named circularize.sh.\n 3. Make it Executable:\n    \n    In your terminal, navigate to where you saved the file and run:\n    \n    chmod +x circularize.sh\n    \n\n 4. Run the Script:\n    \n    Pass the path to your image as an argument:\n    \n    ./circularize.sh my_photo.jpg\n    \n    \n    Or:\n    \n    ./circularize.sh /home/user/pictures/avatar.png\n    \n\nIf you provided my_photo.jpg, the script will create a new file named\nmy_photo_circular.png in the same directory.\n\n--------------------------------------------------------------------------------\n\n\nHow the ImageMagick Command Works#\n\nHere's a breakdown of the main command:\n\n 1.  $IM_COMMAND \"$INPUT_FILE\": Loads your input image.\n 2.  -alpha set: Ensures the image has a transparency (alpha) channel, even if\n     it's a JPG.\n 3.  -gravity center -crop ${SIZE}x${SIZE}+0+0 +repage:\n     * -gravity center: Sets the \"anchor\" point for the crop to the center.\n     * -crop ${SIZE}x${SIZE}+0+0: Crops the image into a square based on the\n       smallest dimension ($SIZE).\n     * +repage: Resets the image's \"page\" geometry, which is necessary after\n       cropping.\n 4.  \\( ... \\): This starts an in-memory \"sub-process\". We are building a mask\n     inside these parentheses.\n 5.  +clone: Makes a copy of our (now square) image. This copy will become the\n     mask.\n 6.  -channel A -evaluate set 0: Selects the alpha channel (A) of the clone and\n     sets it to 0 (fully transparent).\n 7.  -fill white -draw \"circle $C,$C $C,0\": Draws a solid white circle onto the\n     transparent clone. The circle's center is at $C,$C and one edge is at $C,0\n     (the top-middle edge).\n 8.  \\): The sub-process is done. We now have two images in memory: the original\n     cropped photo and our white-circle-on-transparent-background mask.\n 9.  -compose DstIn -composite: This is the magic.\n     * -compose DstIn: Sets the composition method to \"Destination In\".\n     * -composite: Applies the composition. It keeps the parts of the\n       Destination (our photo) that are In the Source (our white circle mask).\n 10. \"$OUTPUT_FILE\": Saves the final result to the output PNG file.","routePath":"/blog-software-engineer/Built Softwares/circle-image","lang":"","toc":[{"text":"**The Bash Script**","id":"the-bash-script","depth":2,"charIndex":-1},{"text":"**How to Use It**","id":"how-to-use-it","depth":2,"charIndex":-1},{"text":"**How the ImageMagick Command Works**","id":"how-the-imagemagick-command-works","depth":3,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"title":"Circular Writing","content":"#\n\n\nCode One File#\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Circular Text Input</title>\n  <style>\n    body {\n      display: grid;\n      align-items: center;\n      height: 100vh;\n      margin: 0;\n    }\n    .circularTextInner {\n      margin: auto;\n      width: 25vw;\n      height: 25vw;\n      display: flex;\n      position: relative;\n    }\n    .circunference {\n      width: 10px;\n      height: 50%;\n      position: absolute;\n      left: 0;\n      right: 0;\n      margin: auto;\n      transform-origin: bottom center;\n      color: #00596d;\n      font-size: 20px;\n    }\n    .inputField {\n      margin: auto;\n      width: 25vw;\n      height: auto;\n      display: flex;\n      position: relative;\n      top: 100px;\n      padding: 10px;\n      font-size: 16px;\n    }\n  </style>\n</head>\n<body>\n  <div>\n    <div class=\"circularTextInner\" id=\"circularTextInner\"></div>\n    <input class=\"inputField\" type=\"text\" id=\"inputField\" placeholder=\"Enter text here\">\n  </div>\n  \n  <script>\n    function createCircularText(text) {\n      const parentInner = document.getElementById('circularTextInner');\n      parentInner.innerHTML = '';\n      const len = text.length;\n      const angle = 360 / len;\n      for (let i = 0; i < len; i++) {\n        const paragraph = document.createElement(\"p\");\n        paragraph.className = \"circunference\";\n        paragraph.style = \"transform:rotate(\" + (360 / len) * i + \"deg);\";\n        const charNode = document.createTextNode(text.charAt(i));\n        paragraph.appendChild(charNode);\n        parentInner.appendChild(paragraph);\n      }\n    }\n\n    createCircularText(\"Hello Circular Text World. \");\n\n    document.getElementById('inputField').addEventListener('input', function () {\n      const inputText = this.value;\n      createCircularText(inputText);\n    });\n  </script>\n</body>\n</html>\n","routePath":"/blog-software-engineer/Built Softwares/circular-writing","lang":"","toc":[{"text":"Code One File","id":"code-one-file","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"title":"Scafold Project Structure","content":"#\n\n\nCreate Project Structure#\n\nnano <PROJECT_NAME>.txt\n\n\nwallpaper_manager # Init Folder\n    main.py                 # The application's entry point.\n    assets/                 # For icons.\n    src/\n        __init__.py         # Makes 'src' a package.\n        main_window.py      # The main application window.\n        wallpaper_handler.py# Logic for finding and setting wallpapers.\n        widgets/\n            __init__.py     # Makes 'widgets' a package.\n            wallpaper_grid.py# The custom widget.\n\n\n\nCreate SH script to Scafold Project#\n\nnano create_project_structure.sh\n\n\n#!/bin/bash\n\n# A script to scaffold a project structure defined by indentation or lack thereof.\n\n# --- Setup and Input Check ---\n\nINPUT=$(cat)\nif [ -z \"$INPUT\" ]; then\n    echo \"Error: No input provided. Please pipe a structure into the script.\"\n    exit 1\nfi\n\n# START Folder\nPROJECT_NAME=$(echo \"$INPUT\" | head -n 1 | sed -E 's/^[[:space:]]*([^/[:space:]]+)\\/?.*/\\1/')\n\n# --- Sequential Execution Logic (Wrapped in Subshell) ---\n(\n    # 1. Create and navigate into the root directory immediately.\n    mkdir -p \"$PROJECT_NAME\"\n    if [ $? -ne 0 ]; then\n        echo \"❌ Error: Could not create the root directory '$PROJECT_NAME'.\"\n        exit 1\n    fi\n    cd \"$PROJECT_NAME\"\n    echo \"   Navigated to: $(pwd)\"\n\n    # Variables for tracking state\n    declare -a PATH_STACK=() # Holds the current directory path hierarchy (e.g., [src, widgets])\n    LAST_INDENT=-1           # Tracks the indentation of the previous line\n\n    # 2. Start at second line and process all lines sequentially \n    echo \"$INPUT\" | tail -n +2 | while IFS='#' read -r line_content comment; do\n        \n        # a) Calculate indentation\n        if [[ \"$line_content\" =~ ^([[:space:]]*) ]]; then\n            INDENT=${#BASH_REMATCH[1]}\n        else\n            INDENT=0\n        fi\n        \n        # b) Clean the item name\n        ITEM_NAME=$(echo \"$line_content\" | sed -E 's/^[[:space:]]*//; s/[[:space:]]*$//')\n        comment=$(echo \"$comment\" | sed 's/^[[:space:]]*//')\n\n        if [[ -z \"$ITEM_NAME\" ]]; then\n            continue # Skip empty lines\n        fi\n\n        # c) Adjust PATH_STACK based on indentation change\n        if [ \"$INDENT\" -lt \"$LAST_INDENT\" ]; then\n            # Pop elements off the stack if we moved to a shallower indent\n            LEVELS_TO_POP=$((LAST_INDENT - INDENT))\n            PATH_STACK=(\"${PATH_STACK[@]:0:${#PATH_STACK[@]}-LEVELS_TO_POP}\")\n        fi\n        \n        # d) Construct the full path and create the item\n        \n        # Determine the current path context based on the stack\n        CURRENT_CONTEXT=$(IFS=/; echo \"${PATH_STACK[*]}\")\n        \n        # The path for creation combines the context and the item name\n        RELATIVE_PATH=\"$CURRENT_CONTEXT/$ITEM_NAME\"\n        RELATIVE_PATH=\"${RELATIVE_PATH#*/}\" # Clean leading slash if stack is empty\n        \n        if [[ \"$ITEM_NAME\" =~ /$ ]]; then\n            # Directory: Create and push onto stack\n            DIR_PATH=\"${ITEM_NAME%%/}\" # Remove trailing slash\n            echo \"   Creating dir:  $RELATIVE_PATH\"\n            mkdir -p \"$RELATIVE_PATH\"\n            PATH_STACK+=(\"$DIR_PATH\") # Add the new directory to the stack\n        else\n            # File: Ensure parent dir exists and create file\n            DIR=$(dirname \"$RELATIVE_PATH\")\n            mkdir -p \"$DIR\" 2>/dev/null\n            \n            echo \"   Creating file: $RELATIVE_PATH\"\n            echo \"# $comment\" > \"$RELATIVE_PATH\"\n        fi\n\n        # e) Update state for the next line\n        LAST_INDENT=$INDENT\n    done\n\n# END of the subshell (reverts the directory change)\n)\n\n# --- Final Confirmation ---\necho \"\"\necho \"✅ Project structure for '$PROJECT_NAME' created successfully!\"\necho \"Current directory is: $(pwd)\"\n\n\n\n\n\nMake Script Executable#\n\nchmod +x ./create_project_structure.sh\n\n\n\nExecute Scafolding of Project#\n\n * Version 1\n\ncat <PROJECT_NAME>.txt | ./create_project_structure.sh\n\n\n * Version 2\n\n./create_project_structure.sh << 'EOF'\nwallpaper_manager\n    main.py                 # The application's entry point.\n    assets/                 # For icons.\n    src/\n        __init__.py         # Makes 'src' a package.\n        main_window.py      # The main application window.\n        wallpaper_handler.py# Logic for finding and setting wallpapers.\n        widgets/\n            __init__.py     # Makes 'widgets' a package.\n            wallpaper_grid.py# The custom widget.\nEOF\n\n\n\nStatus#\n\nCompleted.","routePath":"/blog-software-engineer/Built Softwares/scafold-project-structures","lang":"","toc":[{"text":"Create Project Structure","id":"create-project-structure","depth":2,"charIndex":3},{"text":"Create SH script to Scafold Project","id":"create-sh-script-to-scafold-project","depth":2,"charIndex":510},{"text":"Make Script Executable","id":"make-script-executable","depth":2,"charIndex":3757},{"text":"Execute Scafolding of Project","id":"execute-scafolding-of-project","depth":2,"charIndex":3824},{"text":"Status","id":"status","depth":2,"charIndex":4424}],"domain":"","frontmatter":{},"version":""},{"title":"Wallpaper Manager","content":"#\n\nThis script setup your linux light mode background screen.\n\nExecute Command:\n\nnano main.py\n\n\n\nCode in One File#\n\nimport sys\nfrom PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, \n                             QVBoxLayout, QPushButton, QFileDialog, \n                             QLabel, QMessageBox)\nfrom PyQt5.QtGui import QPixmap\nimport os\nimport platform\n# Import platform-specific modules if needed (e.g., ctypes for Windows)\nimport ctypes # Uncomment if specifically targeting Windows API\n\nclass WallpaperManagerApp(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"Local Wallpaper Manager\")\n        self.setGeometry(100, 100, 1920, 1080)\n\n        # Central Widget and Layout\n        central_widget = QWidget()\n        self.setCentralWidget(central_widget)\n        layout = QVBoxLayout()\n\n        # Widgets\n        self.select_button = QPushButton(\"Select Wallpaper Image\")\n        self.select_button.clicked.connect(self.select_image)\n        \n        self.status_label = QLabel(\"Ready to select image...\")\n\n        # Add widgets to layout\n        layout.addWidget(self.select_button)\n        layout.addWidget(self.status_label)\n        central_widget.setLayout(layout)\n\n    def select_image(self):\n        # Open a file dialog to select an image file\n        # Filter for common image types\n        file_path, _ = QFileDialog.getOpenFileName(\n            self, \n            \"Select Wallpaper\", \n            \"\", \n            \"Image Files (*.jpg *.jpeg *.png *.bmp)\"\n        )\n        \n        if file_path:\n            self.status_label.setText(f\"Selected: {file_path}\")\n            # Step 3 will call the set_wallpaper function here\n            self.set_wallpaper(file_path)\n\n    def set_wallpaper(self, image_path):\n        # This function will contain the platform-specific logic\n        self.status_label.setText(f\"Attempting to set wallpaper...\")\n        \n        system_name = platform.system().lower()\n        \n        try:\n            if system_name == 'windows':\n                # Windows logic (requires ctypes, usually SystemParametersInfoW)\n                # You'll need to uncomment `import ctypes` above for this to work\n                SPI_SETDESKWALLPAPER = 20\n                path = os.path.abspath(image_path)\n                ctypes.windll.user32.SystemParametersInfoW(SPI_SETDESKWALLPAPER, 0, path, 3)\n                # For this initial guide, we'll simplify and show the concept\n                pass \n                \n            elif system_name == 'darwin': # macOS\n                # macOS logic (often uses osascript)\n                script = f\"osascript -e 'tell application \\\"Finder\\\" to set desktop picture to POSIX file \\\"{os.path.abspath(image_path)}\\\"'\"\n                os.system(script)\n                pass\n                \n            elif system_name == 'linux':\n                # Linux/Gnome logic (often uses gsettings)\n                command = f\"gsettings set org.gnome.desktop.background picture-uri file://{os.path.abspath(image_path)}\"\n                os.system(command)\n                pass\n                \n            else:\n                # Fallback for unsupported/unknown systems\n                QMessageBox.warning(self, \"Warning\", \n                    f\"Wallpaper changing is not yet implemented for {platform.system()} or failed.\"\n                )\n                self.status_label.setText(f\"Selection successful, but wallpaper not set.\")\n                return\n\n            self.status_label.setText(f\"Wallpaper set successfully: {os.path.basename(image_path)}\")\n\n        except Exception as e:\n            QMessageBox.critical(self, \"Error\", \n                f\"Failed to set wallpaper. Error: {e}\"\n            )\n            self.status_label.setText(f\"Failed to set wallpaper.\")\n\n\ndef main():\n    app = QApplication(sys.argv)\n    window = WallpaperManagerApp()\n    window.show()\n    sys.exit(app.exec_())\n\nif __name__ == '__main__':\n    main()\n\n\nExecute Script\n\npython main.py\n\n\n\nRoadmap#\n\nMake code modular. Make it work in dark mode.","routePath":"/blog-software-engineer/Built Softwares/wallpaper-manager-one-file","lang":"","toc":[{"text":"Code in One File","id":"code-in-one-file","depth":2,"charIndex":96},{"text":"Roadmap","id":"roadmap","depth":2,"charIndex":3993}],"domain":"","frontmatter":{},"version":""},{"title":"Watermark Images","content":"Code#\n\n// watermark.sh\n#!/bin/#!/bin/bash\nfor i in ./*; do\n    composite -dissolve 55% -gravity Center -quality 100 logo.png \"$i\" \"results/$(echo $i | cut -d '/' -f 2)\"\ndone\n\n\n\nUse#\n\nCreate the file watermark.sh, inside the folder, and create folder results,\ninside the same folder, excute file with sh watermark.sh, replace logo.png with\nyour logo.\n\n\nRoadmap#\n\nBuilt a GUI. Make transparency adjustable. Pick logo from file system. Make\nposition pickable.","routePath":"/blog-software-engineer/Built Softwares/watermark-images","lang":"","toc":[{"text":"Code","id":"code","depth":2,"charIndex":-1},{"text":"Use","id":"use","depth":2,"charIndex":176},{"text":"Roadmap","id":"roadmap","depth":2,"charIndex":351}],"domain":"","frontmatter":{"title":"Watermark Images"},"version":""},{"title":"Project generators","content":"#\n\nVite, RsBuild, and alternative options and paths.\n\n\nThe fundamental architectural difference is key:#\n\n * Vite: Uses a no-bundle, ESM-native dev server. It leans on native browser ES\n   Modules (ESM) to serve your source code instantly. For pre-bundling\n   dependencies (not your app code), it uses esbuild (written in Go). For\n   production, it bundles your app using Rollup (written in JavaScript).\n * Rsbuild: Is a build tool built on top of Rspack, a high-performance bundler\n   written in Rust. Unlike Vite, Rsbuild uses Rspack to bundle your application\n   in both development and production, aiming for maximum consistency and raw\n   bundling speed.\n\n--------------------------------------------------------------------------------\n\n\nComparison: Vite vs. Rsbuild#\n\nHere’s a breakdown of the factors you mentioned:\n\n\n1. Speed#\n\nThis is the most nuanced topic and must be broken down:\n\n * Dev Server Start: Vite is the clear winner. Its no-bundle, ESM-native\n   approach means the dev server starts almost instantly, regardless of project\n   size. It only pre-bundles dependencies.\n * Hot Module Replacement (HMR): Both are extremely fast. Vite's HMR is\n   lightning-fast as it only needs to update the single ESM module that changed.\n   Rsbuild's HMR is also incredibly fast because Rspack's Rust-based incremental\n   compilation is highly optimized. The practical difference for most components\n   is negligible.\n * Production Build: Rsbuild is significantly faster. This is its primary value\n   proposition. Rspack (Rust) is purpose-built for parallelized, high-speed\n   bundling and will outperform Vite's Rollup (JavaScript) by a large margin,\n   especially on large-scale applications with many modules.\n\n\n2. Configuration & Developer Experience (DX)#\n\nBoth are a massive improvement over the webpack.config.js era.\n\n * Vite: Widely praised for its simple and intuitive vite.config.js. The\n   documentation is mature, and the DX is considered best-in-class by many.\n * Rsbuild: Aims for a zero-config experience for common setups but is fully\n   configurable via rsbuild.config.ts. Its API is clean and easy to grasp,\n   especially if you're migrating from CRA or Webpack, as Rspack aims for some\n   Webpack API compatibility.\n\n\n3. Ecosystem & Maturity#\n\n * Vite: The clear leader in maturity and ecosystem size. It has a vast, stable\n   library of plugins (leveraging the Rollup plugin ecosystem). You can find a\n   Vite plugin for almost anything.\n * Rsbuild: It's the new contender. The ecosystem is growing rapidly but is much\n   smaller. However, it benefits from Rspack's compatibility with many Webpack\n   loaders and plugins, which gives it a significant head-start.\n\n\n4. License#\n\n * Both Vite and Rsbuild (and their underlying tools like Rspack and Rollup) are\n   released under the MIT License. This is a non-issue for virtually all\n   commercial and open-source projects.\n\n\n5. Security#\n\n * There are no significant security differences between the tools themselves.\n   Both are secure, maintained, and trusted.\n * As with any Node.js-based tool, the primary security vector comes from\n   third-party dependencies (your node_modules folder). Your security posture\n   depends on auditing your dependencies (npm audit) and managing\n   vulnerabilities, not on the choice between Vite or Rsbuild.\n\n\n6. Dependencies#\n\n * Vite's core \"heavy\" dependencies are esbuild and Rollup.\n * Rsbuild's core \"heavy\" dependency is Rspack.\n * This distinction is more of an architectural note than a practical concern\n   for a project.\n\n\n7. Key Differentiators & Relevant Subjects#\n\n * Dev vs. Prod Consistency: A key advantage of Rsbuild is that it uses the same\n   bundler (Rspack) for both development and production. This eliminates a class\n   of \"it works in dev but breaks in prod\" bugs that can sometimes happen with\n   Vite due to the handoff from its ESM dev server to Rollup for production.\n * Module Federation: Rsbuild has first-class, built-in support for Module\n   Federation, making it a very strong choice for micro-frontend architectures.\n   Support for this in Vite has historically been a weak point, often relying on\n   third-party plugins that can be complex.\n\n--------------------------------------------------------------------------------\n\n\nOther Possible Options#\n\nThe landscape has changed. The React team now officially recommends frameworks\nfirst. Standalone generators/bundlers like Vite and Rsbuild are considered a\nmore advanced, \"build-your-own\" path.\n\n 1. Frameworks (The Recommended Path):\n    * Next.js: The most popular React framework. It's an opinionated, full-stack\n      solution providing server-side rendering (SSR), static site generation\n      (SSG), routing, API routes, and more. It uses its own Rust-based bundler,\n      Turbopack, in development.\n    * Remix: Another excellent full-stack framework focused on web standards. It\n      also provides SSR, routing, and data loading mechanisms.\n 2. Other Generators/Bundlers:\n    * Parcel: The original zero-config bundler. It's also very fast (using a\n      Rust compiler) and requires minimal setup, making it great for smaller\n      projects and rapid prototyping.\n    * Create React App (CRA): The \"classic\" generator. It is now deprecated by\n      the React team. It's slow, heavy (uses Webpack), and should not be used\n      for new projects.\n\n--------------------------------------------------------------------------------\n\n\nExpert Take: Which Should You Choose?#\n\n * Choose Vite if:\n   * You want the most mature, stable, and widely-used modern build tool.\n   * You value the largest plugin ecosystem.\n   * You are building a standard Client-Side Rendered (CSR) Single-Page\n     Application (SPA) or library.\n   * Instantaneous dev server start time is your highest priority.\n * Choose Rsbuild if:\n   * Production build speed is your absolute highest priority (e.g., in a large\n     monorepo or CI/CD pipeline).\n   * You need first-class Module Federation support.\n   * You value the consistency of using the same bundler for dev and prod.\n   * You are migrating from a large Webpack project and want to leverage\n     Rspack's performance and compatibility.\n * Choose a Framework (like Next.js) if:\n   * You are building a new application (not a library).\n   * You need SEO, routing, server-side rendering, or API endpoints. This is the\n     default, recommended path for most React app development today.","routePath":"/blog-software-engineer/Frontend/project-generators","lang":"","toc":[{"text":"The fundamental architectural difference is key:","id":"the-fundamental-architectural-difference-is-key","depth":2,"charIndex":54},{"text":"**Comparison: Vite vs. Rsbuild**","id":"comparison-vite-vs-rsbuild","depth":2,"charIndex":-1},{"text":"**1. Speed**","id":"1-speed","depth":3,"charIndex":-1},{"text":"**2. Configuration & Developer Experience (DX)**","id":"2-configuration--developer-experience-dx","depth":3,"charIndex":-1},{"text":"**3. Ecosystem & Maturity**","id":"3-ecosystem--maturity","depth":3,"charIndex":-1},{"text":"**4. License**","id":"4-license","depth":3,"charIndex":-1},{"text":"**5. Security**","id":"5-security","depth":3,"charIndex":-1},{"text":"**6. Dependencies**","id":"6-dependencies","depth":3,"charIndex":-1},{"text":"**7. Key Differentiators & Relevant Subjects**","id":"7-key-differentiators--relevant-subjects","depth":3,"charIndex":-1},{"text":"**Other Possible Options**","id":"other-possible-options","depth":2,"charIndex":-1},{"text":"**Expert Take: Which Should You Choose?**","id":"expert-take-which-should-you-choose","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"title":"Android 16 with Linux Terminal","content":"#\n\n * Enable developer options\n * Enable in developer options OEM and USB Debug.\n * Use DSU Loader to Install GSI+GMS ARM64 and check versionin terms that is\n   version 16.\n * Restart system to enter in Android 16\n * Enable developer options in adroid 16.\n * Enable in developer options linux terminal.\n * To enable expressive design run in terminal the command: setprop\n   is_expressive_design_enabled true\n * To get back to previous version open notifications and restart android.\n\nIn your laptop:\n\n * sudo dnf install android-tools\n * To enable sticky mode, always boot from Android 16.\n   * Connect Mobile by USB and execute the command: adb shell gsi_tool enable\n\n * To disable sticky mode same process with command: adb shell gsi_tool disable.","routePath":"/blog-software-engineer/Linux/android","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"title":"DNF Install Qt","content":"#\n\n\n1. Qt6 Packages (Recommended for New Projects)#\n\nThese packages provide the core libraries, development headers, and common\nmodules for Qt6.\n\nBash\n\n# Core Qt6 development files (essential)\n\nsudo dnf install qt6-qtbase-devel\n\n# QML and Qt Quick development\n\nsudo dnf install qt6-qtdeclarative-devel\n\n# SVG image support\n\nsudo dnf install qt6-qtsvg-devel\n\n# Multimedia framework\n\nsudo dnf install qt6-qtmultimedia-devel\n\n# Tools like Assistant and Designer\n\nsudo dnf install qt6-qttools-devel\n\n# WebEngine support for embedding web content\n\nsudo dnf install qt6-qtwebengine-devel\n\n# 3D rendering and graphics\n\nsudo dnf install qt6-qt3d-devel\n\n# Charts module\n\nsudo dnf install qt6-qtcharts-devel\n\n# For Wayland support\n\nsudo dnf install qt6-qtwayland-devel\n\n\n2. Qt5 Packages (For Maintaining Older Projects)#\n\nIf you need to work on existing projects built with Qt5, these are the\nequivalent packages. It is safe to have both Qt5 and Qt6 development packages\ninstalled simultaneously.\n\nBash\n\n# Core Qt5 development files (essential)\n\nsudo dnf install qt5-qtbase-devel\n\n# QML and Qt Quick development\n\nsudo dnf install qt5-qtdeclarative-devel\n\n# SVG image support\n\nsudo dnf install qt5-qtsvg-devel\n\n# Multimedia framework\n\nsudo dnf install qt5-qtmultimedia-devel\n\n# Tools like Assistant and Designer\n\nsudo dnf install qt5-qttools-devel\n\n# WebEngine support for embedding web content\n\nsudo dnf install qt5-qtwebengine-devel\n\n# 3D rendering and graphics\n\nsudo dnf install qt5-qt3d-devel\n\n# Charts module\n\nsudo dnf install qt5-qtcharts-devel\n\n# For Wayland support\n\nsudo dnf install qt5-qtwayland-devel\n\n# Legacy X11 development\n\nsudo dnf install qt5-qtx11extras-devel\n\n\n3. Qt Creator IDE and Documentation#\n\nQt Creator is the official cross-platform IDE for Qt development. The version in\nthe Fedora repositories is a good starting point. The documentation and example\npackages are highly recommended.\n\nBash\n\n# Install the Qt Creator IDE\n\nsudo dnf install qt-creator\n\n# Qt6 Documentation, Examples, and Source Code\n\nsudo dnf install qt6-doc qt6-qtbase-examples\n\n# Qt5 Documentation, Examples, and Source Code\n\nsudo dnf install qt5-doc qt5-qtbase-examples\n\n\nAll-in-One Command#\n\nHere is a comprehensive command that installs a robust development environment\nfor both Qt6 and Qt5, including Qt Creator and documentation.\n\nsudo dnf install qt-creator qt6-qtbase-devel qt6-qtdeclarative-devel qt6-qtsvg-devel qt6-qtmultimedia-devel qt6-qttools-devel qt6-qtwebengine-devel qt6-doc qt6-qtbase-examples qt5-qtbase-devel qt5-qtdeclarative-devel qt5-qtsvg-devel qt5-qtmultimedia-devel qt5-qttools-devel qt5-qtwebengine-devel qt5-doc qt5-qtbase-examples\n\n\nAfter running these commands, Qt Creator should automatically detect the\ninstalled Qt versions, allowing you to configure kits and start building\napplications right away.","routePath":"/blog-software-engineer/Linux/dnf-install-qt","lang":"","toc":[{"text":"**1. Qt6 Packages (Recommended for New Projects)**","id":"1-qt6-packages-recommended-for-new-projects","depth":2,"charIndex":-1},{"text":"**2. Qt5 Packages (For Maintaining Older Projects)**","id":"2-qt5-packages-for-maintaining-older-projects","depth":2,"charIndex":-1},{"text":"**3. Qt Creator IDE and Documentation**","id":"3-qt-creator-ide-and-documentation","depth":2,"charIndex":-1},{"text":"**All-in-One Command**","id":"all-in-one-command","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"title":"Fedora","content":"Softwares#\n\n * Development: Kate IDE, Konsole, Helix IDE, VSCodium, Podman, Meld Merge,\n   Kronometer, KTimer, LabPlot, Bruno.\n * Browser: Brave, QuteBrowser.\n * Games: ChessX, Kigo, PySol Fan Club.","routePath":"/blog-software-engineer/Linux/fedora","lang":"","toc":[{"text":"Softwares","id":"softwares","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"title":"Fedora"},"version":""},{"title":"**Termux Files Share**","content":"Termux Files Share#\n\n(Phone to PC/Mac/Linux). This guide will show you how to transfer files,\nfolders, and directories between your Android phone and a computer using Termux,\nall over your local WiFi.\n\n\nMethod 1: The Best & Most Powerful Way (SFTP Server)#\n\nThis method turns your phone into a secure file server (SFTP) that you can\naccess from any computer with a file transfer client. You get a full file\nbrowser and can drag-and-drop files in both directions (upload and download).\n\n\nPart 1: On Your Android Phone (Inside Termux)#\n\n 1. Update and Install Packages:\n    \n    Open Termux and run the following commands to make sure everything is\n    up-to-date and to install OpenSSH, which provides the server.\n    \n    pkg update && pkg upgrade -y\n    \n    pkg install openssh -y\n\n 2. Set Your Password:\n    \n    You need to create a password for the connection. This is not your phone's\n    lock screen password; it's a new password just for Termux.\n    \n    passwd\n    \n    Enter your new password twice. (You won't see any characters as you type).\n\n 3. Grant Storage Access (Crucial!):\n    \n    To access your phone's \"Internal Storage\" (like your Downloads, DCIM, and\n    Pictures folders) from your computer, you must give Termux permission.\n    \n    termux-setup-storage\n    \n    Your phone will pop up a permission request. Accept it. This creates a new\n    folder in Termux's home directory called storage, which is a symbolic link\n    to your phone's files.\n\n 4. Find Your Connection Details (Username & IP):\n    \n    You need two pieces of information for your computer to find your phone.\n    \n    * To find your Username, run:\n      \n      whoami\n      \n      The output will be something like u0_a123 or similar. Write this down.\n    \n    * To find your Phone's IP Address, run:\n      \n      ip addr show wlan0\n      \n      Look for the line that says inet. You'll see your phone's local WiFi IP\n      address. Write this down.\n\n 5. Start the Server:\n    \n    Now, simply start the SSH server.\n    \n    sshd\n    \n    The server is now running in the background.\n\n\nPart 2: On Your Computer (PC/Mac/Linux)#\n\n 1. Get an SFTP Client:\n    \n    You need a program that can speak SFTP.\n    * Windows: FileZilla or WinSCP are excellent free options.\n    * Mac: FileZilla or Cyberduck work great.\n    * Linux: You can use FileZilla or your file manager (e.g., in Nautilus, go\n      to \"Other Locations\" and enter sftp://YOUR_USERNAME@YOUR_IP:8022).\n 2. Configure the Connection:\n    \n    Open your client (e.g., FileZilla) and look for the \"Site Manager\" or \"New\n    Connection\" settings.\n    \n    Fill in the details you found in Part 1:\n    * Protocol: SFTP - SSH File Transfer Protocol\n    * Host: Your phone's IP address (e.g., 192.168.1.5)\n    * Port: 8022 (This is very important! Termux uses port 8022, not the default\n      22.)\n    * User: Your username (e.g., u0_a123)\n    * Password: The password you set with the passwd command.\n 3. Connect and Transfer!\n    \n    Click \"Connect\". You may get a warning about an \"unknown host key.\" This is\n    normal; just accept it.\n    \n    You are now connected! You will see your computer's files on one side and\n    your Termux files on the other.\n    * To find your phone's files (Photos, Downloads, etc.), navigate into the\n      storage folder.\n    * You can now drag and drop files and entire folders between your computer\n      and your phone.\n\n\nMethod 2: The Quick & Easy Way (Download-Only Server)#\n\nIf you just want to quickly download some files from your phone to your computer\nand don't want to install software, this is a great option.\n\n 1. On your phone (in Termux):\n    \n    * Install Python (if you don't have it):\n      \n      pkg install python\n    \n    * Navigate to the folder you want to share. For example, to share your main\n      Downloads folder:\n      \n      cd ~/storage/downloads\n    \n    * Start the simple web server:\n      \n      python -m http.server 8000\n\n 2. On your computer:\n    \n    * Open any web browser (Chrome, Firefox, Safari).\n    * In the address bar, type your phone's IP address (the one you found in\n      Method 1), followed by :8000.\n      \n      Example: IP-PHONE-WIFI:8000\n    * You will see a simple list of all files and folders in that directory. You\n      can click on any file to download it.\n\nTo stop this server, just go back to Termux and press Ctrl + C.","routePath":"/blog-software-engineer/Linux/termux-files-share","lang":"","toc":[{"text":"**Method 1: The Best & Most Powerful Way (SFTP Server)**","id":"method-1-the-best--most-powerful-way-sftp-server","depth":2,"charIndex":-1},{"text":"**Part 1: On Your Android Phone (Inside Termux)**","id":"part-1-on-your-android-phone-inside-termux","depth":3,"charIndex":-1},{"text":"**Part 2: On Your Computer (PC/Mac/Linux)**","id":"part-2-on-your-computer-pcmaclinux","depth":3,"charIndex":-1},{"text":"**Method 2: The Quick & Easy Way (Download-Only Server)**","id":"method-2-the-quick--easy-way-download-only-server","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"title":"Anaconda","content":"#\n\n\nInstallation#\n\n * Download Anaconda from Official Website.\n\n * Execute the file\n\nbash <FILENAME>.sh\n\n\n * My preference is activate manually the anaconda base and other environments,\n   so after install run:\n\nconda config --set auto_activate_base falseconda config --set auto_activate_base false\n\n\n\nUseful commands#\n\n * Activate base environment\n\nconda activate base\n\n\n * Test Anaconda Navigator\n\nanaconda-navigator\n\n\n * Create a custom environment\n\nconda create −−name <NAME_ENVIRONMENT> python=<VERSION>\n\n\n * Deactivate Environment\n\nconda deactivate\n\n\n * Delete Environment\n\nconda remove -n <NAME_ENVIRONMENT> --all\n\n\n * Install Package\n\nconda install <PACKAGE_NAME>\n\n\n * List All Packages\n\nconda list\n\n\n * Search for Packages Versions\n\nconda search <PACKAGE_NAME>\n\n\n * Update Conda Version\n\nconda update conda\n\n\n * Export and Recreate Environment\n\nconda env export > environment.yml\nconda env create -f environment.yml\n","routePath":"/blog-software-engineer/Python/anaconda","lang":"","toc":[{"text":"Installation","id":"installation","depth":2,"charIndex":3},{"text":"Useful commands","id":"useful-commands","depth":2,"charIndex":301}],"domain":"","frontmatter":{},"version":""},{"title":"LSP Libraries","content":"#\n\nLanguage Server Protocol Clients allow to make autocompletions, suggestions,\ndocs inline and more features available in your ide, relevants ones in my radar:\nPyright, BasePyRight, Pylance, Pylsp, Pyrefly, UVX Ty, Pylyzer","routePath":"/blog-software-engineer/Python/lsp","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"title":"PyQT's real world scenarios","content":"#\n\n--------------------------------------------------------------------------------\n\n\n## Level 1: The Absolute Basics - Making a Window 🪟#\n\n * Concept: PyQt is a Python \"binding\" for the Qt application framework. Think\n   of it as a toolkit that gives your Python code the power to create\n   traditional desktop applications with windows, buttons, and menus. It's like\n   giving a master chef (your Python logic) a professional kitchen (the Qt\n   framework) to work in.\n * Use Case: Creating the simplest possible graphical user interface (GUI).\n * Real-World Scenario: A student or hobbyist wants to move beyond console-based\n   \"Hello, World!\" programs and create an actual clickable window on their\n   screen.\n * Production Example: This level is too simple for production, but it's the\n   foundational step for every complex application. A script that just opens a\n   blank window is the starting point.\n\n\nimport sys  \nfrom PyQt6.QtWidgets import QApplication, QWidget\n\n\\# Every PyQt application must create an application object.  \napp \\= QApplication(sys.argv)\n\n\\# The QWidget widget is the base class of all user interface objects.  \nwindow \\= QWidget()  \nwindow.setWindowTitle('My First App')  \nwindow.show() \\# Make the window visible.\n\n\\# Start the event loop.  \nsys.exit(app.exec())\n\n\n--------------------------------------------------------------------------------\n\n\n## Level 2: Adding Widgets and Layouts - Building a Form 📝#\n\n * Concept: Widgets are the building blocks of a GUI—buttons (QPushButton), text\n   boxes (QLineEdit), labels (QLabel), etc. Layouts (QVBoxLayout, QHBoxLayout,\n   QGridLayout) are invisible containers that automatically arrange your\n   widgets, ensuring the UI looks organized even when the window is resized.\n * Use Case: Creating a simple data entry form.\n * Real-World Scenario: A receptionist needs a very simple tool to enter a\n   visitor's name and company before printing a badge.\n * Production Example: The login screen for an internal company tool. It has\n   labels for \"Username\" and \"Password,\" two text input fields, and a \"Login\"\n   button, all neatly arranged.\n\n--------------------------------------------------------------------------------\n\n\n## Level 3: Signals & Slots - Making It Interactive 💡#\n\n * Concept: This is the core of Qt's interactivity. When something happens\n   (e.g., a user clicks a button), the widget emits a signal. You connect that\n   signal to a Python function, which is called a slot. This signal -> slot\n   connection is how you make your application do things.\n * Use Case: Connecting UI actions to backend logic.\n * Real-World Scenario: In the data entry form from Level 2, when the \"Submit\"\n   button is clicked (the clicked signal), a function (the slot) is triggered to\n   save the entered name and company to a text file.\n * Production Example: In a video player like VLC (which uses Qt), dragging the\n   volume slider emits a valueChanged signal. This signal is connected to a slot\n   that adjusts the application's audio volume.\n\n\n\\# ... (inside your application class)  \nbutton \\= QPushButton(\"Click Me\")  \n\\# Connect the button's 'clicked' signal to the 'on\\_button\\_click' method (the slot).  \nbutton.clicked.connect(self.on\\_button\\_click)\n\ndef on\\_button\\_click(self):  \n    print(\"Button was clicked\\!\")  \n    QMessageBox.information(self, \"Success\", \"Data has been processed.\")\n\n\n--------------------------------------------------------------------------------\n\n\n## Level 4: Complex UIs & Main Windows - Building an Application 🛠️#\n\n * Concept: Real applications are more than just one form. QMainWindow is a\n   pre-made widget that provides a standard application structure, including a\n   menu bar (QMenuBar), toolbars (QToolBar), and a status bar (QStatusBar). You\n   also start using more advanced widgets like tables (QTableWidget) and tabbed\n   interfaces (QTabWidget).\n * Use Case: Building a simple document editor or data browser.\n * Real-World Scenario: Creating a basic inventory management tool for a small\n   store. It has a menu bar (\"File\", \"Edit\"), a main area with a table showing\n   products, and a status bar at the bottom displaying the total number of\n   items.\n * Production Example: Anki, the popular open-source flashcard program. Its main\n   interface is a QMainWindow that presents decks, a menu bar for syncing and\n   settings, and a central area to review cards.\n\n--------------------------------------------------------------------------------\n\n\n## Level 5: Qt Designer - Separating Design from Logic 🎨#\n\n * Concept: Writing code to manually position every widget is tedious. Qt\n   Designer is a drag-and-drop tool that lets you visually design your UI and\n   save it as a .ui file. Your Python code then loads this file, instantly\n   creating the interface. This separates the \"look\" (the .ui file) from the\n   \"feel\" (the Python logic).\n * Use Case: Rapidly prototyping and building complex user interfaces.\n * Real-World Scenario: A team of developers is building a settings dialog with\n   dozens of checkboxes, sliders, and input fields organized into tabs. Instead\n   of writing hundreds of lines of UI code, a designer lays it out visually in\n   Qt Designer in a fraction of the time. The developer then just writes the\n   Python code to handle the logic.\n * Production Example: Many engineering and scientific tools use this approach.\n   The UI for controlling a piece of lab equipment might be designed visually,\n   while the Python code handles the complex communication protocols with the\n   hardware.\n\n--------------------------------------------------------------------------------\n\n\n## Level 6: Styling & Customization - Creating a Brand Identity ✨#\n\n * Concept: Giving your application a unique, professional look. This is done\n   primarily with Qt Style Sheets (QSS), which have a syntax nearly identical to\n   CSS used in web development. For truly unique functionality, you can also\n   create custom widgets by inheriting from existing ones and overriding their\n   drawing or behavior.\n * Use Case: Creating a branded application with a non-standard look (e.g., a\n   dark theme).\n * Real-World Scenario: A music production software company wants its\n   application to have a dark, sleek interface with custom-designed knobs and\n   sliders that look like real studio hardware. They use QSS to define the color\n   scheme and create a custom QDial widget for the knobs.\n * Production Example: Dropbox's desktop client settings panel. It doesn't use\n   the default operating system's look; instead, it uses a custom, clean, and\n   branded style that is consistent across Windows, macOS, and Linux, achieved\n   through styling.\n\n--------------------------------------------------------------------------------\n\n\n## Level 7: Multithreading - Keeping the UI Responsive 🏃#\n\n * Concept: If you run a long task (like downloading a file or processing a\n   large amount of data) in your main UI code, the entire application will\n   freeze until it's done. The solution is multithreading. PyQt provides a\n   QThread class to move long-running tasks to a separate \"worker\" thread. This\n   worker can send signals back to the main thread to update a progress bar\n   (QProgressBar) or display results without ever freezing the UI.\n * Use Case: Performing any task that takes more than a fraction of a second.\n * Real-World Scenario: A data analysis tool that needs to process a 5GB data\n   file. When the user clicks \"Process,\" a worker thread is started. The main UI\n   remains responsive, showing a progress bar that updates as the worker thread\n   sends progress signals. The user can even click a \"Cancel\" button.\n * Production Example: Calibre, the e-book management software. When converting\n   an e-book from one format to another (a slow process), it does so in a\n   background thread. The main interface remains fully usable, allowing you to\n   browse your library while the conversion job runs in the background.\n\n--------------------------------------------------------------------------------\n\n\n## Level 8: Advanced Integration - Databases & Networking 🌐#\n\n * Concept: Most real applications need to communicate with the outside world.\n   PyQt has built-in modules like QtSql for connecting to databases (like\n   SQLite, PostgreSQL, MySQL) and QtNetwork for making HTTP requests and\n   building clients/servers. This allows you to create rich, data-driven\n   applications without relying on many external libraries.\n * Use Case: Building a client application for a web service or a local database\n   viewer.\n * Real-World Scenario: A stock monitoring application. It uses QtNetwork to\n   periodically fetch the latest stock prices from a financial API. It then uses\n   QtSql to log this data to a local SQLite database for historical analysis.\n   The data is displayed to the user in a QTableView that is linked directly to\n   the database model.\n * Production Example: Orange Data Mining. This is a powerful visual programming\n   tool for data science. Its entire interface is built with PyQt. Many of its\n   \"widgets\" (visual blocks) are designed to connect to data sources, whether\n   from a local CSV file, a remote URL, or a SQL database, using these exact Qt\n   modules.\n\n--------------------------------------------------------------------------------\n\n\n## Level 9: Custom Graphics & Visualization - Beyond Standard Widgets 📈#\n\n * Concept: For applications that require more than just buttons and forms, like\n   CAD tools, scientific plotters, or game editors, PyQt offers the Graphics\n   View Framework. It provides a QGraphicsScene (an abstract surface) where you\n   can add thousands of 2D items (QGraphicsItem) and a QGraphicsView to look at\n   the scene. It's highly optimized for complex, interactive 2D graphics.\n * Use Case: Creating node-based editors, scientific visualization tools, or\n   simple 2D drawing applications.\n * Real-World Scenario: A visual effects studio builds an in-house tool for\n   artists to create complex shader graphs. The interface is a QGraphicsView\n   where artists can drag-and-drop nodes (custom QGraphicsItem objects) and\n   connect them with lines to build a material.\n * Production Example: Autodesk Maya, a leading 3D animation software. While its\n   core 3D viewport is a highly specialized C++ component, a huge portion of its\n   surrounding UI, including the node editor, attribute editor, and scripting\n   windows, is built using PyQt (or its C++ equivalent, Qt). This allows for\n   easy customization and scripting by technical artists.\n\n--------------------------------------------------------------------------------\n\n\n## Level 10: Cross-Platform Deployment & Professional Distribution 📦#\n\n * Concept: The final step is packaging your Python/PyQt application into a\n   single, standalone executable file (.exe on Windows, .app on macOS) that\n   users can run without installing Python or any libraries. Tools like\n   PyInstaller or cx_Freeze are used to bundle the Python interpreter, your\n   code, and all necessary PyQt libraries into a professional, distributable\n   package.\n * Use Case: Distributing a commercial or open-source desktop application to a\n   non-technical audience.\n * Real-World Scenario: A software company has finished its new photo editing\n   application. They use PyInstaller to create installers for Windows and macOS.\n   When a customer downloads and runs the installer, it places a single\n   application icon in their programs folder, which works just like any other\n   native application.\n * Production Example: A huge number of commercial and scientific applications\n   are deployed this way. Spyder, the Scientific Python Development Environment,\n   is a complex application written in PyQt that is often distributed as a\n   standalone package, bundling all its dependencies for a simple user\n   experience. This showcases PyQt's ability to build and deploy complex,\n   mission-critical applications to a wide audience.","routePath":"/blog-software-engineer/Python/pyqt-real-world-scenarios","lang":"","toc":[{"text":"**## Level 1: The Absolute Basics - Making a Window 🪟**","id":"-level-1-the-absolute-basics---making-a-window-","depth":3,"charIndex":-1},{"text":"**## Level 2: Adding Widgets and Layouts - Building a Form 📝**","id":"-level-2-adding-widgets-and-layouts---building-a-form-","depth":3,"charIndex":-1},{"text":"**## Level 3: Signals & Slots - Making It Interactive 💡**","id":"-level-3-signals--slots---making-it-interactive-","depth":3,"charIndex":-1},{"text":"**## Level 4: Complex UIs & Main Windows - Building an Application 🛠️**","id":"-level-4-complex-uis--main-windows---building-an-application-️","depth":3,"charIndex":-1},{"text":"**## Level 5: Qt Designer - Separating Design from Logic 🎨**","id":"-level-5-qt-designer---separating-design-from-logic-","depth":3,"charIndex":-1},{"text":"**## Level 6: Styling & Customization - Creating a Brand Identity ✨**","id":"-level-6-styling--customization---creating-a-brand-identity-","depth":3,"charIndex":-1},{"text":"**## Level 7: Multithreading - Keeping the UI Responsive 🏃**","id":"-level-7-multithreading---keeping-the-ui-responsive-","depth":3,"charIndex":-1},{"text":"**## Level 8: Advanced Integration - Databases & Networking 🌐**","id":"-level-8-advanced-integration---databases--networking-","depth":3,"charIndex":-1},{"text":"**## Level 9: Custom Graphics & Visualization - Beyond Standard Widgets 📈**","id":"-level-9-custom-graphics--visualization---beyond-standard-widgets-","depth":3,"charIndex":-1},{"text":"**## Level 10: Cross-Platform Deployment & Professional Distribution 📦**","id":"-level-10-cross-platform-deployment--professional-distribution-","depth":3,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"title":"QT & PyQT5","content":"#\n\nThe Qt application framework is a mature, comprehensive, cross-platform\ndevelopment toolset primarily written in C++ that is used for creating graphical\nuser interfaces (GUIs) as well as non-GUI applications for desktop, mobile,\nembedded, and web platforms.\n\nIt was originally conceived in the 1990s and has since become a leading\nframework known for its write once, deploy everywhere philosophy and its\ncomprehensive set of APIs for everything from graphics and UI to networking,\ndatabases, and threading.\n\n--------------------------------------------------------------------------------\n\n\nQt Development with PyQt5: Free to Use#\n\nYou can develop and use the Qt framework for free by leveraging its open-source\nlicensing and the Python bindings provided by PyQt5.\n\nCOMPONENT                     DESCRIPTION                                                    FREE FOR DEVELOPMENT & USE?            KEY LICENSE\nQt Framework (The C++ Core)   The fundamental cross-platform libraries and APIs.             Yes (under Open Source terms)          GNU Lesser General Public License (LGPL v3) and GNU General\n                                                                                                                                    Public License (GPL)\nPyQt5                         The Python bindings for Qt 5, created by Riverbank             Yes (if your project is open source)   GNU General Public License (GPL v3) or a Commercial License\n                              Computing.\nQt Widgets                    The classic collection of desktop-style UI components          Yes                                    LGPL/GPL\n                              (buttons, text boxes, etc.).\nQt Quick / QML                A declarative language (QML) and framework for building        Yes                                    LGPL/GPL\n                              modern, dynamic UIs, especially for mobile and embedded\n                              systems.\nQt Creator                    The official cross-platform Integrated Development             Yes                                    GPL\n                              Environment (IDE).\nQt Designer                   A graphical tool for designing and creating UI forms using a   Yes                                    Included with the open-source Qt tools.\n                              drag-and-drop interface, generating .ui files.\n\n\nThe Critical Licensing Point (GPL vs. LGPL)#\n\nThe ability to use PyQt5 for free depends on the license you choose for your own\napplication:\n\n 1. Open Source Projects: If your application is distributed under a\n    GPL-compatible open-source license, you can use PyQt5 for free.\n 2. Proprietary/Closed-Source Projects:\n    * Since PyQt5 is licensed under GPL v3, you must purchase a commercial\n      license from Riverbank Computing if you intend to distribute a\n      proprietary, closed-source application.\n    * Alternatively, you can switch to PySide6 (the official Qt for Python\n      bindings from The Qt Company), which is available under the more\n      permissive LGPL v3 license. LGPL generally allows you to use the library\n      in closed-source applications without purchasing a commercial license,\n      provided you adhere to its specific terms (e.g., dynamically linking to\n      the Qt libraries).\n\n--------------------------------------------------------------------------------\n\n\nKey Related Qt Products and Tools#\n\nWhile the framework is the foundation, several tools aid the development\nprocess:\n\n\n1. Development Tools#\n\n * Qt Creator: The official IDE for Qt development. It integrates tools like the\n   visual debugger and the build system (qmake or CMake).\n * Qt Designer: A WYSIWYG (What You See Is What You Get) tool for creating .ui\n   files, which are XML-based descriptions of your user interface. PyQt\n   applications can load these files directly or convert them to Python code\n   using the pyuic5 tool.\n * Moc (Meta-Object Compiler): A tool essential for C++ that enables Qt's unique\n   object communication system known as Signals and Slots, though this is\n   handled automatically when using PyQt5 in Python.\n\n\n2. Framework Components (Modules)#\n\nQt is modular, meaning you only include the components you need. The core\ncomponents free to use with PyQt5 include:\n\n * Qt Core: Essential non-GUI classes (threading, file I/O, event system, and\n   the powerful Signals and Slots mechanism).\n * Qt Widgets: The library for traditional desktop applications with a native\n   look and feel.\n * Qt GUI: Base classes for graphical elements, windowing, and OpenGL.\n * Qt Network: Classes for TCP/IP, UDP, and network programming.\n * Qt SQL: Database integration classes.\n * Qt Multimedia: Classes for audio, video, and camera functionality.\n * Qt Quick / QML: A declarative scripting language for rapid development of\n   fluid, animated, touch-enabled user interfaces.\n\n\n3. Cross Platform Compilation#\n\nPyQt5 code can be \"compiled\" (packaged into standalone executables) for a wide\nrange of operating systems, limited primarily by the underlying Qt 5 framework's\ncross-platform support.\n\nThe main platforms it supports are:\n\nCore Desktop Platforms These are the most common and easiest to deploy to using\ntools like PyInstaller or cx_Freeze:\n\n * Windows (32-bit and 64-bit Intel/AMD architectures)\n * macOS (Intel and Apple Silicon/ARM architectures)\n * Linux (Various distributions like Ubuntu, Fedora, using Intel/AMD and ARM\n   architectures)\n\nMobile and Other Platforms While more complex and often requiring specialized\ntools like pyqtdeploy, PyQt5 (and Qt 5) can also target mobile and embedded\nsystems:\n\n * Android\n * iOS\n * Various embedded systems (like Raspberry Pi, which uses ARM Linux).\n\nEssentially, because PyQt is a binding for the C++ Qt library, it can run on any\nplatform for which the Qt 5 framework itself has been ported. This makes PyQt a\ntruly cross-platform solution for GUI development.\n\nFuentes","routePath":"/blog-software-engineer/Python/pyqt5","lang":"","toc":[{"text":"**Qt Development with PyQt5: Free to Use**","id":"qt-development-with-pyqt5-free-to-use","depth":2,"charIndex":-1},{"text":"**The Critical Licensing Point (GPL vs. LGPL)**","id":"the-critical-licensing-point-gpl-vs-lgpl","depth":3,"charIndex":-1},{"text":"**Key Related Qt Products and Tools**","id":"key-related-qt-products-and-tools","depth":2,"charIndex":-1},{"text":"**1. Development Tools**","id":"1-development-tools","depth":3,"charIndex":-1},{"text":"**2. Framework Components (Modules)**","id":"2-framework-components-modules","depth":3,"charIndex":-1},{"text":"**3. Cross Platform Compilation**","id":"3-cross-platform-compilation","depth":3,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"title":"Quarto Scientific and Technical Publishing","content":"#\n\nQuarto is an open-source scientific and technical publishing system. This\nnext-generation evolution of R Markdown from Posit allows users to create\ndynamic content using multiple computational languages, including Python, R,\nJulia, and Observable. It executes code and renders documents, ensuring all\nanalyses and outputs are fully reproducible. You author content using either\nJupyter Notebooks or plain text markdown. Quarto utilizes the powerful Pandoc\nmarkdown with extensions for advanced elements like LaTeX equations, citations,\nand cross-references.\n\n--------------------------------------------------------------------------------\n\n\nGeneral Use Cases#\n\nQuarto transforms single-source documents into various professional-quality\npublications. Use Quarto to:\n\n * Create reproducible articles, reports, and manuscripts\n * Develop engaging presentations and dashboards\n * Publish comprehensive websites, blogs, and books\n * Render output in multiple formats including HTML, PDF, Microsoft Word, and\n   ePub\n\n--------------------------------------------------------------------------------\n\n\nPython Use Cases#\n\nQuarto offers robust, native support for the Python ecosystem, enabling data\nscientists and developers to integrate code and output into their publications.\n\nAuthoring and Execution\n\nYou can author Quarto documents in several ways:\n\n * Use a traditional Jupyter Notebook interface for interactive development.\n * Employ a plain text markdown representation of a notebook for easier version\n   control and editing in any text editor.\n\nQuarto executes Python code directly, allowing users to embed all standard\nPython output, including complex visualizations from libraries such as\nMatplotlib, Seaborn, and Plotly, into the final document.\n\nSpecific Capabilities\n\nThe system combines the flexibility of markdown with dynamic code execution to\ncreate advanced outputs:\n\n * Dynamic Documents: Generate documents that automatically regenerate when data\n   or underlying assumptions change, ensuring your analyses remain current and\n   trustworthy.\n * Interactive Content: Enhance reader engagement by adding interactive data\n   exploration features. You achieve this by integrating popular Python tools\n   like Jupyter Widgets and the Shiny for Python framework directly into the\n   document.\n * Tool Compatibility: Work within your preferred environment, whether it is\n   JupyterLab, VS Code, or a standalone text editor, without compromising output\n   quality.","routePath":"/blog-software-engineer/Python/quarto-interactive-publications","lang":"","toc":[{"text":"**General Use Cases**","id":"general-use-cases","depth":2,"charIndex":-1},{"text":"**Python Use Cases**","id":"python-use-cases","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"title":"Helix IDE","content":"Use case#\n\nCode Editor. Full keyboard. Search. Autocompletions. Suggestions.\n\n\nSet up Helix IDE#\n\nflatpak install flathub com.helix_editor.Helix\n\n\n\nLinks Resources#\n\n * Helix IDE\n * Install languages servers\n * Youtube Video to activate inline suggestions\n * Youtube Video to activate lazygit\n\n\nOpen Helix and Config#\n\nhx\n:config-open\n\n\n\nConfig inline suggestions#\n\n# config.toml\ntheme = \"base16_terminal\"\n\n[editor]\ncolor-modes = true\nend-of-line-diagnostics = \"hint\"\n\n[editor.inline-diagnostics]\ncursor-line = \"warning\"\n\n[editor.lsp]\ndisplay-inlay-hints = true\n\n[keys.normal]\nC-g = [\":new\", \":insert-output lazygit\", \":buffer-close!\", \":redraw\"]\n\n\n\nLanguage Server Protocol#\n\n * After install of language servers preferred preferred.\n * Modify languages config and use:\n\n# languages.toml\n[language-server.astro-ls]\ncommand = \"astro-ls\"\nargs = [\"--stdio\"]\nconfig = {typescript = {tsdk = \"/Users/user/.bun/install/global/node_modules/typescript/lib\"}, environment = \"node\"}\n\n[[language]]\nname = \"astro\"\nauto-format = true\nlanguage-servers = [ \"astro-ls\" ]\n\n[[language]]\nname = \"go\"\nauto-format = true\nformatter = { command = \"goimports\" }\n\n[[language]]\nname = \"python\"\nlanguage-servers = [\"pyrefly\", \"pyright\", \"ruff\", \"pylyzer\"]\nroots = [\"pyrefly.toml\", \"pyproject.toml\", \".git\"]\nformatter = { command = \"ruff\", args = [\"format\", \"-\"] }\n[language-server.pyright.config.python.analysis]\ntypeCheckingMode = \"basic\"\n[language-server.ruff]\ncommand = \"ruff\"\nargs = [\"server\"]\n[language-server.pylyzer]\ncommand = \"pylyzer\"\nargs = [\"--server\"]\n[language-server.pyrefly]\ncommand = \"pyrefly\"\nargs = [\"lsp\"]\n\n\n[language-server.rust-analyzer.config.check]\ncommand = \"clippy\"\n\n[language-server.rust-analyzer.config.cargo]\nfeatures = \"all\"\n\n[language-server.sql-language-server]\ncommand = \"sql-language-server\"\nargs = [\"up\", \"--method\", \"stdio\"]\n\n[[language]]\nname = \"sql\"\nlanguage-servers = [ \"sql-language-server\" ]\n\n[[language]]\nname = \"toml\"\nformatter = { command = \"taplo\", args = [\"fmt\", \"-\"] }\n\n\n\nFeatures Overview#\n\n * Multiple selections\n * Tree-sitter integration\n * Powerful code manipulation\n * Language server support\n * Built in Rust, for the terminal\n * Modern builtin features\n\n\nKey Board COMMANDS#\n\n\nHightlights:#\n\n * SPACE (workspace)\n * ESC : write_command (general commands)\n * g (file commands)\n\n\nIn command logic loader mode:#\n\n * Autocomplete: CTRL + x\n * Show Docs: SPACE + k\n * Scroll Docs: CTRL+D and CTRL + U\n * Go to definition: gd\n * Go Backwards and Forward: CTRL + O and CTRL+I\n * Debug: SPACE + G\n\nIn Kate IDE to use Helix IDE from integrated terminal Konsole and enter in\n\"normal_mode\" usually with key \"esc\" after enter in insert mode with \"i\" to\nreturn to \"normal_mode\"\" use instead\n\n * Ctrl + esc\n\n\nAdvantage?#\n\nPlug and play, ready to use.","routePath":"/blog-software-engineer/Rust/helix-ide","lang":"","toc":[{"text":"Use case","id":"use-case","depth":2,"charIndex":-1},{"text":"Set up Helix IDE","id":"set-up-helix-ide","depth":2,"charIndex":78},{"text":"Links Resources","id":"links-resources","depth":2,"charIndex":147},{"text":"Open Helix and Config","id":"open-helix-and-config","depth":2,"charIndex":294},{"text":"Config inline suggestions","id":"config-inline-suggestions","depth":2,"charIndex":337},{"text":"Language Server Protocol","id":"language-server-protocol","depth":2,"charIndex":649},{"text":"Features Overview","id":"features-overview","depth":2,"charIndex":1990},{"text":"Key Board COMMANDS","id":"key-board-commands","depth":2,"charIndex":2181},{"text":"Hightlights:","id":"hightlights","depth":3,"charIndex":2203},{"text":"In command logic loader mode:","id":"in-command-logic-loader-mode","depth":3,"charIndex":2304},{"text":"Advantage?","id":"advantage","depth":2,"charIndex":2721}],"domain":"","frontmatter":{"title":"Helix IDE"},"version":""},{"title":"Rust Best Practices","content":" * Use pattern matching with match for enums. (Prevent bugs).\n * Use Option and Result types for predictable error handling. (Code safety).\n * Use iter,map, filter for data processing. (Inmutability).\n * Use enum for types with variants. (Type safety).\n * Use trait for shared behaviour in different types. (Polymorphism).\n * Use descriptive names that communicate actions and results as with\n   verb_name_details. (Scale codebase and team work).\n * Use snake_case for variables and functions. (Readability).\n * Use prefix for booleans with is, has, can. (Consistency across environments).\n * Use const, static for inmutability with capital letters. (Consistency).\n * Use complete words and don't use abbreviations. (Teamwork).\n * Declare variables with clear different names. (Maintanability).\n * Define name conventions for your codebase that respect the language\n   conventions. (Adaptability).\n * Use impl to group methods for a type. (Encapsulation).\n * Use From and Into for types conversions. (Flexibility).\n * Use std::borrow:Cow to handle borrowed and owned data. (Clone on Write,\n   useful for Performance).\n * Use std::rc::Rc for reference counting. (Single thread).\n * Use std::sync::Arc for atomic references. (Multi thread).\n * Use std::cell:RefCell for mutability in single thread. (Mutable borrows).\n * Use std::sync::{Arc, Mutex} for thread safe interior mutability. (Prevents\n   data races).\n * Create clear documentation. (Teamwork).\n * Use triple slash for API documentation. (Automation enabler).\n * Update comments when the commented part change. (Consistency).\n * Comment only when explanation add value and answer why? complex questions.\n   (Only useful depencencies).\n * Use TODO comment as a flag to review later. (Code reviews).\n * Use ? for readable error propagation. (Error handling).\n * Use async and await for asynchronous code. (Operations).\n * Use for loops to iterate over collections. (Safer operations).","routePath":"/blog-software-engineer/Rust/rust-best-practices","lang":"","toc":[],"domain":"","frontmatter":{"title":"Rust Best Practices"},"version":""},{"title":"Ollama and Continue Dev","content":"#\n\n\nLinks Resources#\n\n * Ollama\n * Continue\n\n\nOllama install#\n\ncurl -fsSL https://ollama.com/install.sh | sh\n\n\n\nContinue dev, vs code plugin#\n\nollama run models\nollama run llama3:8b\nollama pull nomic-embed-text\n\n\n\nConfiguration file for continue dev#\n\n  \"models\": [\n    {\n      \"title\": \"Llama 3 8B\",\n      \"provider\": \"ollama\",\n      \"model\": \"llama3:8b\"\n    }\n  ],\n  \"tabAutocompleteModel\": {\n    \"title\": \"Llama 3 8B\",\n    \"provider\": \"ollama\",\n    \"model\": \"llama3:8b\"\n  },\n    \"embeddingsProvider\": {\n    \"provider\": \"ollama\",\n    \"model\": \"nomic-embed-text\"\n  }\n\n\nNote: I prefer to use it for non code tasks or very basic boilerplate.\n\nMy real use cases for AI are:\n\n * Questions Creator. Instead of use AI to give me answers, it gives me\n   questions.\n * Enhance my quality question creational process.\n * Play characters from real life or fictional, to obtain their point of view.\n * Enhance my empathical qualities by sharing me different points of view about\n   a situation.\n * PDFs Analyzer.","routePath":"/blog-software-engineer/Tools Resources/ai-local-assistant","lang":"","toc":[{"text":"Links Resources","id":"links-resources","depth":2,"charIndex":3},{"text":"Ollama install","id":"ollama-install","depth":2,"charIndex":45},{"text":"Continue dev, vs code plugin","id":"continue-dev-vs-code-plugin","depth":2,"charIndex":111},{"text":"Configuration file for continue dev","id":"configuration-file-for-continue-dev","depth":2,"charIndex":213}],"domain":"","frontmatter":{"title":"Ollama and Continue Dev"},"version":""},{"title":"Git VCS","content":"Links Resources#\n\n * Git\n * GitHub Cli\n * Gitea\n * Jujutsu\n\n\nGit Install#\n\ncurl -o git.tar.gz https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.26.2.tar.gz\n\n\ngit --version\n\n\n\nGit commands#\n\nInitialize a local Git repository\n\ngit init\n\n\nclone public repository\n\ngit clone [repository-url]\n\n\nClone private repository\n\ngit clone ssh://git@github.com/[username]/[repository-name].git\n\n\nCheck status\n\ngit status\n\n\nAdd a file to the staging area\n\ngit add [file-name]\n\n\nAdd all new and changed files to the staging area\n\ngit add -A\n\n\nCommit changes\n\ngit commit -m \"[commit message]\"\n\n\nRemove a file (or folder)\n\ngit rm -r [file-name.txt]\n\n\nShow current branch\n\ngit branch\n\n\nList of branches\n\ngit branch -a\n\n\nCreate a new branch\n\ngit branch [branch name]\n\n\nDelete a branch\n\ngit branch -d [branch name]\n\n\nDelete a branch forcefully\n\ngit branch -D [branch name]\n\n\nDelete a remote branch\n\ngit push origin --delete [branch name]\n\n\nCreate a new branch and switch to it\n\ngit checkout -b [branch name]\n\n\nClone a remote branch and switch to it\n\ngit checkout -b [branch name] origin/[branch name]\n\n\nRename a local branch\n\ngit branch -m [old branch name] [new branch name]\n\n\nDiscard changes to a file\n\ngit checkout -- [file_name.txt]\n\n\nMerge a branch into the active branch\n\ngit merge [branch name]\n\n\nMerge a branch into a target branch\n\ngit merge [source branch] [target branch]\n\n\nStash changes in a dirty working directory\n\ngit stash\n\n\nRemove all stashed entries\n\ngit stash clear\n\n\nPush a branch to your remote repository\n\ngit push origin [branch name]\n\n\nPush changes to new branch at remote repository\n\ngit push -u origin [branch name]\n\n\nPush changes to remote repository\n\ngit push\n\n\nDelete a remote branch\n\ngit push origin --delete [branch name]\n\n\nUpdate local repository to the newest commit\n\ngit pull\n\n\nPull changes from remote repository\n\ngit pull origin [branch name]\n\n\nAdd a remote repository\n\ngit remote add origin ssh://git@github.com/[username]/[repository-name].git\n\n\nSet a repository's origin branch to SSH\n\ngit remote set-url origin ssh://git@github.com/[username]/[repository-name].git\n\n\nView changes\n\ngit log\n\n\nView detailed changes\n\ngit log --summary\n\n\nView changes, briefly\n\ngit log --oneline\n\n\nPreview changes before merging\n\ngit diff [source branch] [target branch]\n\n\nRevert commit changes\n\ngit revert commitId\n\n\nSet globally Username\n\ngit config --global user.name \"your_username\"\n\n\nSet globally Email id\n\ngit config --global user.email \"your_email_address@example.com\"\t\n\n\nGet global config\n\ngit config --global --list\n\n\n\nGitHUb CLI#\n\nsudo dnf install gh\n\ngh auth login\n\ngh repo clone <repository>\n\n\n\nGitea#\n\nmkdir -p /data/gitea\n\n\n//compose.yml\nversion: '2'\n\nservices:\n  gitea:\n    image: gitea/gitea:latest\n    container_name: gitea\n    environment:\n      - USER_UID=1000\n      - USER_GID=1000\n    volumes:\n      - /data/gitea:/data\n    ports:\n      - \"3000:3000\"\n      - \"222:22\"\n    restart: always\n\n\ndocker-compose --file compose.yaml up -d\n\n\nOr\n\npodman compose --file compose.yaml up --detach\n\n\n\nJujutsu#\n\ncargo binstall --strategies crate-meta-data jj-cli\n\n\nsource <(jj util completion bash)\n\n\nsource <(COMPLETE=bash jj)\n\n\njj git clone [repository-url]\n","routePath":"/blog-software-engineer/Tools Resources/git","lang":"","toc":[{"text":"Links Resources","id":"links-resources","depth":2,"charIndex":-1},{"text":"Git Install","id":"git-install","depth":2,"charIndex":60},{"text":"Git commands","id":"git-commands","depth":2,"charIndex":183},{"text":"GitHUb CLI","id":"github-cli","depth":2,"charIndex":2534},{"text":"Gitea","id":"gitea","depth":2,"charIndex":2613},{"text":"Jujutsu","id":"jujutsu","depth":2,"charIndex":3014}],"domain":"","frontmatter":{"title":"Git VCS"},"version":""},{"title":"Kate IDE","content":"#\n\n\nPath installed thorught Flatpak#\n\n~/.var/app/org.kde.kate\n\n\nBackup your config#\n\nTo \"export\" your settings, you essentially need to backup the relevant\nconfiguration files and then copy them to your new system or user profile.\n\n\nMain Configuration:#\n\n~/.var/app/org.kde.kate/.config/katerc (General application settings)\n\n\nColor Schemes/Syntax Highlighting:#\n\n~/.var/app/org.kde.kate/.config/kateschemarc\n\n~/.var/app/org.kde.kate/.config/katesyntaxhighlightingrc\n\n\nKeyboard Shortcuts (Key Bindings):#\n\n~/.var/app/org.kde.kate/.local/share/kxmlgui5/katepart/katepart5ui.rc (Contains\nkeymaps for the editing component)\n\n\nSnippets, Sessions, and other Meta Information:#\n\nThe files related to sessions and snippets are often found in directories like:\n\n~/.var/app/org.kde.kate/.local/share/kate/\n\n~/.var/app/org.kde.kate/.local/share/ktexteditor/\n\n\nGeneral Steps to Export/Backup:#\n\n * Close Kate to ensure all settings are saved to disk.\n * Locate and copy the files/directories listed above (e.g., katerc,\n   kateschemarc, katepart5ui.rc, and the content of ~/.local/share/kate/ if it\n   exists).\n * Transfer these files to your new machine or profile.\n * Place them in the corresponding locations on the new system (you may need to\n   overwrite existing files, so consider backing those up first).\n * Start Kate on the new system.\n\n\nSetup Language Server Protocol#\n\n * Install lsp e.g. pip install pyrefly.\n * Menu > Settings > Configure Kate > LSP Client > User Server Settings:\n * Copy this setup:\n\n{\n  \"servers\": {\n    \"python\": {\n      \"command\": [\"pyrefly\", \"lsp\"],\n      \"url\": \"https://pyrefly.org\",\n      \"highlightingModeRegex\": \"^Python$\"\n    }\n  }\n}\n\n\n * command is a field that change as well as highlightingModeRegex, url is only\n   for reference.","routePath":"/blog-software-engineer/Tools Resources/kate-ide","lang":"","toc":[{"text":"Path installed thorught Flatpak","id":"path-installed-thorught-flatpak","depth":2,"charIndex":3},{"text":"Backup your config","id":"backup-your-config","depth":2,"charIndex":63},{"text":"Main Configuration:","id":"main-configuration","depth":3,"charIndex":232},{"text":"Color Schemes/Syntax Highlighting:","id":"color-schemessyntax-highlighting","depth":3,"charIndex":326},{"text":"Keyboard Shortcuts (Key Bindings):","id":"keyboard-shortcuts-key-bindings","depth":3,"charIndex":468},{"text":"Snippets, Sessions, and other Meta Information:","id":"snippets-sessions-and-other-meta-information","depth":3,"charIndex":622},{"text":"General Steps to Export/Backup:","id":"general-steps-to-exportbackup","depth":3,"charIndex":849},{"text":"Setup Language Server Protocol","id":"setup-language-server-protocol","depth":2,"charIndex":1336}],"domain":"","frontmatter":{},"version":""},{"title":"List of Resources","content":"This index aims to highlight different resources on topics where I expanse my\nknowledge, theory and practice.\n\n\nData structures#\n\n * Youtube channel on data structures\n * Books: Algorithms Illuminated series.\n\n\nDesing patterns#\n\n * Web. Front End: Patterns dev\n * Book Java: Head first design patterns. (The knowledge here it can be applied\n   to other languages)\n\n\nLibraries, Tools, Technologies#\n\n * GitHub CLI: GH\n * A better dotenv–from the creator of dotenv: DotEnvX\n * View markdown in the terminal MDLess\n * Terminal GUI for Git Lazygit\n * Extend cargo to query cargo crates with command cargo info crate-name, rust\n   crate cargo-info.\n\ncargo install cargo-info\n\n\n * Terminal, Back to the future, FishShell\n\nsudo dnf install fish\n# Enter in fish shell\nfish\n\n\n * Find files with sql like queries FSelect\n * Command line viewer for rustdoc documentation. Rust crate, rusty-man. Note:\n   ahash yanked(outdated) dependency, exploring local builds fix.\n\ncargo install rusty-man\n\n\n * Cheat sheets and search in browser. Search Patterns\n * Terminal multiplexer, become over powered with this gemstone, tmux\n * Create presentations in markdown format and run them from your terminal,\n   presenterm\n * A better way to navigate directories, find files, and launch commands, broot\n * A syntax-highlighting pager for git, diff, and grep output, delta\n * Fast and polyglot tool for code structural search, lint, rewriting at large\n   scale, ast-grep\n * Python development and debugging from eclipse, pydev\n * A modern terminal for the 21st century, rioterm\n * Cheatsheets for the terminal, tealdeer\n * PNPM prioritizes efficiency in the use of space disk and correctness strict\n   dependency resolution, PNPM\n * Bun is an all-in-one JavaScript runtime, bundler, and test runner that\n   integrates its package manager, emphasizing raw speed and a unified\n   development workflow. It is built from the ground up for performance using\n   the Zig. Installation speeds over 20-30 faster than npm, Bun\n * Google Cheat Sheet Advanced Search Advanced Search","routePath":"/blog-software-engineer/Tools Resources/list-of-resources","lang":"","toc":[{"text":"Data structures","id":"data-structures","depth":2,"charIndex":111},{"text":"Desing patterns","id":"desing-patterns","depth":2,"charIndex":210},{"text":"Libraries, Tools, Technologies","id":"libraries-tools-technologies","depth":2,"charIndex":365}],"domain":"","frontmatter":{"title":"List of Resources"},"version":""},{"title":"Meld Merge","content":"Use case#\n\nCompare and merge files, folders, and repositories.\n\n\nLink Resources#\n\nMeld Merge\n\n\nInstall#\n\nBy software manager linux.\n\n\nCompatibility#\n\nLinux, Mac, WIndows.","routePath":"/blog-software-engineer/Tools Resources/meld-merge","lang":"","toc":[{"text":"Use case","id":"use-case","depth":2,"charIndex":-1},{"text":"Link Resources","id":"link-resources","depth":2,"charIndex":64},{"text":"Install","id":"install","depth":2,"charIndex":94},{"text":"Compatibility","id":"compatibility","depth":2,"charIndex":133}],"domain":"","frontmatter":{"title":"Meld Merge"},"version":""},{"title":"To Research","content":" * Linux mobile with hub connector, as laptop, experiment.\n * Degoogle Mobile Phone and Install a different OS instead of Android.\n * App, divide screen in squares, assign number to each square, write number,\n   move mouse cursor to center of the square, code in rust.\n * App, terminal commad, that executes ls recursively with a flag for depth,\n   show each depth side by side.\n * App, to add and delete spheres of two different colors, given and input of\n   coordinates in xyz and color.","routePath":"/blog-software-engineer/Tools Resources/research-list","lang":"","toc":[],"domain":"","frontmatter":{"title":"To Research"},"version":""},{"title":"Index Overview","content":"","routePath":"/blog-software-engineer/","lang":"","toc":[],"domain":"","frontmatter":{"overview":true,"title":"Index Overview"},"version":""}]