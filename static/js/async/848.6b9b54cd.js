"use strict";(self.webpackChunkplantacerium=self.webpackChunkplantacerium||[]).push([["848"],{6524:function(e,n,i){i.r(n),i.d(n,{default:()=>a});var s=i(5893),r=i(65);function t(e){let n={code:"code",li:"li",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use pattern matching with match for enums. (Prevent bugs)."}),"\n",(0,s.jsx)(n.li,{children:"Use Option and Result types for predictable error handling. (Code safety)."}),"\n",(0,s.jsx)(n.li,{children:"Use iter,map, filter for data processing. (Inmutability)."}),"\n",(0,s.jsx)(n.li,{children:"Use enum for types with variants. (Type safety)."}),"\n",(0,s.jsx)(n.li,{children:"Use trait for shared behaviour in different types. (Polymorphism)."}),"\n",(0,s.jsx)(n.li,{children:"Use descriptive names that communicate actions and results as with verb_name_details. (Scale codebase and team work)."}),"\n",(0,s.jsx)(n.li,{children:"Use snake_case for variables and functions. (Readability)."}),"\n",(0,s.jsx)(n.li,{children:"Use prefix for booleans with is, has, can. (Consistency across environments)."}),"\n",(0,s.jsx)(n.li,{children:"Use const, static for inmutability with capital letters. (Consistency)."}),"\n",(0,s.jsx)(n.li,{children:"Use complete words and don't use abbreviations. (Teamwork)."}),"\n",(0,s.jsx)(n.li,{children:"Declare variables with clear different names. (Maintanability)."}),"\n",(0,s.jsx)(n.li,{children:"Define name conventions for your codebase that respect the language conventions. (Adaptability)."}),"\n",(0,s.jsx)(n.li,{children:"Use impl to group methods for a type. (Encapsulation)."}),"\n",(0,s.jsx)(n.li,{children:"Use From and Into for types conversions. (Flexibility)."}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"std::borrow:Cow"})," to handle borrowed and owned data. (Clone on Write, useful for Performance)."]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"std::rc::Rc"})," for reference counting. (Single thread)."]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"std::sync::Arc"})," for atomic references. (Multi thread)."]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"std::cell:RefCell"})," for mutability in single thread. (Mutable borrows)."]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"std::sync::{Arc, Mutex}"})," for thread safe interior mutability. (Prevents data races)."]}),"\n",(0,s.jsx)(n.li,{children:"Create clear documentation. (Teamwork)."}),"\n",(0,s.jsx)(n.li,{children:"Use triple slash for API documentation. (Automation enabler)."}),"\n",(0,s.jsx)(n.li,{children:"Update comments when the commented part change. (Consistency)."}),"\n",(0,s.jsx)(n.li,{children:"Comment only when explanation add value and answer why? complex questions. (Only useful depencencies)."}),"\n",(0,s.jsx)(n.li,{children:"Use TODO comment as a flag to review later. (Code reviews)."}),"\n",(0,s.jsx)(n.li,{children:"Use ? for readable error propagation. (Error handling)."}),"\n",(0,s.jsx)(n.li,{children:"Use async and await for asynchronous code. (Operations)."}),"\n",(0,s.jsx)(n.li,{children:"Use for loops to iterate over collections. (Safer operations)."}),"\n"]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["blog-software-engineer%2FRust%2Frust-best-practices.md"]={toc:[],title:"Rust Best Practices",headingTitle:"",frontmatter:{title:"Rust Best Practices"}}}}]);