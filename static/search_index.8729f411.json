[{"title":"Local DevDocs","content":"#\n\nYou run a podman container that executes the Freecodecamp repository DevDocs\nimage for API Browse locally different technology documentations.\n\n\nRepository.#\n\nRepository Freecodecamp Devdocs\n\n\nRun command.#\n\npodman run --name devdocs -d -p 9292:9292 ghcr.io/freecodecamp/devdocs:latest\n\n\n\nInstructions.#\n\n * Access to localhost:9292\n * Enable your documentation.\n * Install your documentation.\n * Backup data with export.\n\n\nSample Export Data#\n\n{\"docs\":\"astro/axios/git/gnu_make/go/html/http/javascript/node/npm/python~3.13/react/redux/rust/zig\"}\n","routePath":"/blog-developer/Back-End/local-devdocs","lang":"","toc":[{"text":"Repository.","id":"repository","depth":2,"charIndex":147},{"text":"Run command.","id":"run-command","depth":2,"charIndex":195},{"text":"Instructions.","id":"instructions","depth":2,"charIndex":291},{"text":"Sample Export Data","id":"sample-export-data","depth":2,"charIndex":426}],"domain":"","frontmatter":{},"version":""},{"title":"List of Resources","content":"This index aims to highlight different resources on topics where I expanse my\nknowledge, theory and practice.\n\n\nData structures:#\n\n * Youtube channel on data structures\n * Books: Algorithms Illuminated series.\n\n\nDesing patterns:#\n\n * Web. Front End: Patterns dev\n * Book Java: Head first design patterns. (The knowledge here it can be applied\n   to other languages)\n\n\nLibraries and Tools#\n\n * A better dotenvâ€“from the creator of dotenv: DotEnvX\n * View markdown in the terminal MDLess\n * Terminal GUI for Git Lazygit\n * Extend cargo to query cargo crates with command cargo info crate-name, rust\n   crate cargo-info.\n\ncargo install cargo-info\n\n\n * Terminal, Back to the future, FishShell\n\nsudo dnf install fish\n# Enter in fish shell\nfish\n\n\n * Find files with sql like queries FSelect\n * Command line viewer for rustdoc documentation. Rust crate, rusty-man. Note:\n   ahash yanked(outdated) dependency, exploring local builds fix.\n\ncargo install rusty-man\n\n\n * Cheat sheets and search in browser. Search Patterns\n * Terminal multiplexer, become over powered with this gemstone, tmux\n * Create presentations in markdown format and run them from your terminal,\n   presenterm\n * A better way to navigate directories, find files, and launch commands, broot\n * A syntax-highlighting pager for git, diff, and grep output, delta\n * Fast and polyglot tool for code structural search, lint, rewriting at large\n   scale, ast-grep\n * Python development and debugging from eclipse, pydev\n * A modern terminal for the 21st century, rioterm\n * Cheatsheets for the terminal, tealdeer","routePath":"/blog-developer/Resources/index-list","lang":"","toc":[{"text":"Data structures:","id":"data-structures","depth":2,"charIndex":111},{"text":"Desing patterns:","id":"desing-patterns","depth":2,"charIndex":211},{"text":"Libraries and Tools","id":"libraries-and-tools","depth":2,"charIndex":367}],"domain":"","frontmatter":{"title":"List of Resources"},"version":""},{"title":"To Research","content":" * Linux mobile with hub connector, as laptop, experiment.\n * App, divide screen in squares, assign number to each square, write number,\n   move mouse cursor to center of the square, code in rust.\n * App, terminal commad, that executes ls recursively with a flag for depth,\n   show each depth side by side.\n * App, to add and delete spheres of two different colors, given and input of\n   coordinates in xyz and color.","routePath":"/blog-developer/Resources/research-list","lang":"","toc":[],"domain":"","frontmatter":{"title":"To Research"},"version":""},{"title":"Rust Best Practices","content":" * Use pattern matching with match for enums. (Prevent bugs).\n * Use Option and Result types for predictable error handling. (Code safety).\n * Use iter,map, filter for data processing. (Inmutability).\n * Use enum for types with variants. (Type safety).\n * Use trait for shared behaviour in different types. (Polymorphism).\n * Use descriptive names that communicate actions and results as with\n   verb_name_details. (Scale codebase and team work).\n * Use snake_case for variables and functions. (Readability).\n * Use prefix for booleans with is, has, can. (Consistency across environments).\n * Use const, static for inmutability with capital letters. (Consistency).\n * Use complete words and don't use abbreviations. (Teamwork).\n * Declare variables with clear different names. (Maintanability).\n * Define name conventions for your codebase that respect the language\n   conventions. (Adaptability).\n * Use impl to group methods for a type. (Encapsulation).\n * Use From and Into for types conversions. (Flexibility).\n * Use std::borrow:Cow to handle borrowed and owned data. (Clone on Write,\n   useful for Performance).\n * Use std::rc::Rc for reference counting. (Single thread).\n * Use std::sync::Arc for atomic references. (Multi thread).\n * Use std::cell:RefCell for mutability in single thread. (Mutable borrows).\n * Use std::sync::{Arc, Mutex} for thread safe interior mutability. (Prevents\n   data races).\n * Create clear documentation. (Teamwork).\n * Use triple slash for API documentation. (Automation enabler).\n * Update comments when the commented part change. (Consistency).\n * Comment only when explanation add value and answer why? complex questions.\n   (Only useful depencencies).\n * Use TODO comment as a flag to review later. (Code reviews).\n * Use ? for readable error propagation. (Error handling).\n * Use async and await for asynchronous code. (Operations).\n * Use for loops to iterate over collections. (Safer operations).","routePath":"/blog-developer/Rust/rust-best-practices","lang":"","toc":[],"domain":"","frontmatter":{"title":"Rust Best Practices"},"version":""},{"title":"Sourcebot","content":"Description.#\n\nSourcebot is a self-hosted platform that helps humans and agents answer\nquestions about your code.\n\n * SourceBot Dev Web\n * Sourcebot Repository\n\n\nRun Sourcebot.#\n\nCreate a /SourceBot folder, and execute the next command:\n\nnano config.json\n\n\nEdit, write and save the file:\n\n//config.json\n{\n    \"$schema\": \"https://raw.githubusercontent.com/sourcebot-dev/sourcebot/main/schemas/v3/index.json\",\n    \"connections\": {\n        // Comments are supported\n        \"repos\": {\n            \"type\": \"github\",\n            \"repos\": [\n                \"sourcebot-dev/sourcebot\",\n                \"plantacerium/plantacerium.github.io\"\n            ]\n        }\n    }\n}\n\n\nIn the same folder where You created config.json, execute the next command:\n\npodman run -p 3000:3000 --pull=always --rm -v $(pwd):/data:z -e CONFIG_PATH=/data/config.json --name sourcebot ghcr.io/sourcebot-dev/sourcebot:latest\n\n\n * Originally the command use docker, here You use podman.\n * To allow podman to create the volume with folders and files add ':z' to\n   transform from '-v $(pwd):/data' to '-v $(pwd):/data:z'.\n * This allows Podman to relabel the file or directory with the appropriate\n   SELinux context, enabling access. This step typically needs to be done only\n   once; after relabeling, subsequent runs can omit the :z flag\n * Access to localhost:3000\n * Follow wizard set up.\n\nYou are all set and ready to use Sourcebot Dev.\n\n\nCommand to Spin SourceBot Dev Next Time#\n\npodman run -d -p 3000:3000 --pull=always --rm -v $(pwd):/data -e CONFIG_PATH=/data/config.json --name sourcebot ghcr.io/sourcebot-dev/sourcebot:latest\n\n\n * Notice that ':z' is not in the command of the second execution.\n * You run the container in detach mode fo ease of use.\n\nNow You completed the Steps.","routePath":"/blog-developer/Tools/sourcebot-dev","lang":"","toc":[{"text":"Description.","id":"description","depth":2,"charIndex":-1},{"text":"Run Sourcebot.","id":"run-sourcebot","depth":2,"charIndex":161},{"text":"Command to Spin SourceBot Dev Next Time","id":"command-to-spin-sourcebot-dev-next-time","depth":2,"charIndex":1411}],"domain":"","frontmatter":{"title":"Sourcebot"},"version":""},{"title":"About","content":"#\n\nPlantacerium, Senior Software Engineer, I am writing in deep articles and\nenhancing my mastery exponentially at Rust, and Reactjs.\n\n * Highlighted Skills: Git, GitHub, Github Actions, Linux Commands, VSCode,\n   Helix IDE, Rust, Cargo, Toml, Javascript, Typescript, HTML, CSS, SASS,\n   Reactjs, Nextjs, Tanstack, Zustand, Redux, React Testing, Astro, Gsap,\n   Animejs, Bootstrap, Material UI, Radix UI, D3, Nodejs, API Rest, Swagger,\n   GraphQL, Better Auth, Postman, Debug, Web Deployments, Docker, Podman.\n * Based in Europe.\n * Remote worker.\n * Full time position.\n\n\nPortfolio#\n\nThis is my digital garden, to nurture and growth the flame of wonder and\nknowledge for programming.\n\n\nContact Plantacerium Community Pandacinamics#\n\nDiscord invitation","routePath":"/blog-developer/","lang":"","toc":[{"text":"Portfolio","id":"portfolio","depth":2,"charIndex":572},{"text":"Contact Plantacerium Community Pandacinamics","id":"contact-plantacerium-community-pandacinamics","depth":2,"charIndex":686}],"domain":"","frontmatter":{},"version":""}]