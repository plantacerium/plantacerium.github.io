[{"title":"Local DevDocs","content":"#\n\nYou run a podman container that executes the Freecodecamp repository DevDocs\nimage for API Browse locally different technology documentations.\n\n\nRepository.#\n\nRepository Freecodecamp Devdocs\n\n\nRun command.#\n\npodman run --name devdocs -d -p 9292:9292 ghcr.io/freecodecamp/devdocs:latest\n\n\n\nInstructions.#\n\n * Access to localhost:9292\n * Enable your documentation.\n * Install your documentation.\n * Backup data with export.\n\n\nSample Export Data#\n\n{\"docs\":\"astro/axios/git/gnu_make/go/html/http/javascript/node/npm/python~3.13/react/redux/rust/zig\"}\n","routePath":"/blog-software-engineer/Back-End/local-devdocs","lang":"","toc":[{"text":"Repository.","id":"repository","depth":2,"charIndex":147},{"text":"Run command.","id":"run-command","depth":2,"charIndex":195},{"text":"Instructions.","id":"instructions","depth":2,"charIndex":291},{"text":"Sample Export Data","id":"sample-export-data","depth":2,"charIndex":426}],"domain":"","frontmatter":{},"version":""},{"title":"Podman","content":"Podman#\n\nPodman is an OCI compliant container management tool able to run rootless\ncontainers. Managing containers without root privileges as a normal use. Podman\naddress security concerns from previous container tools as docker.\n\n\nLinks Resources#\n\nPodman\n\n\nInstall#\n\nsudo dnf -y install podman\n\n\n\nPodman desktop#\n\nflatpak install flathub io.podman_desktop.PodmanDesktop\n# Run podman desktop\nflatpak run io.podman_desktop.PodmanDesktop\n\n\n\nSample command#\n\npodman images\n\n\n\nContainer registries#\n\nDefault configuration:\n\n * quay.io\n * docker.io Find the configuration here\n\n/etc/containers/registries.conf\n\n\nAdditional tools#\n\nBuildah Build containers images.\n\nSkopeo Analyze images before pulling them\n\nYouki Container runtime written in Rust","routePath":"/blog-software-engineer/Back-End/podman","lang":"","toc":[{"text":"Podman","id":"podman","depth":2,"charIndex":-1},{"text":"Links Resources","id":"links-resources","depth":2,"charIndex":231},{"text":"Install","id":"install","depth":2,"charIndex":258},{"text":"Podman desktop","id":"podman-desktop","depth":2,"charIndex":298},{"text":"Sample command","id":"sample-command","depth":2,"charIndex":439},{"text":"Container registries","id":"container-registries","depth":2,"charIndex":473},{"text":"Additional tools","id":"additional-tools","depth":2,"charIndex":607}],"domain":"","frontmatter":{"title":"Podman"},"version":""},{"title":"Sourcebot","content":"Description.#\n\nSourcebot is a self-hosted platform that helps humans and agents answer\nquestions about your code.\n\n * SourceBot Dev Web\n * Sourcebot Repository\n\n\nRun Sourcebot.#\n\nCreate a /SourceBot folder, and execute the next command:\n\nnano config.json\n\n\nEdit, write and save the file:\n\n//config.json\n{\n    \"$schema\": \"https://raw.githubusercontent.com/sourcebot-dev/sourcebot/main/schemas/v3/index.json\",\n    \"connections\": {\n        // Comments are supported\n        \"repos\": {\n            \"type\": \"github\",\n            \"repos\": [\n                \"sourcebot-dev/sourcebot\",\n                \"plantacerium/plantacerium.github.io\"\n            ]\n        }\n    }\n}\n\n\nIn the same folder where You created config.json, execute the next command:\n\npodman run -p 3000:3000 --pull=always --rm -v $(pwd):/data:z -e CONFIG_PATH=/data/config.json --name sourcebot ghcr.io/sourcebot-dev/sourcebot:latest\n\n\n * Originally the command use docker, here You use podman.\n * To allow podman to create the volume with folders and files add ':z' to\n   transform from '-v $(pwd):/data' to '-v $(pwd):/data:z'.\n * This allows Podman to relabel the file or directory with the appropriate\n   SELinux context, enabling access. This step typically needs to be done only\n   once; after relabeling, subsequent runs can omit the :z flag\n * Access to localhost:3000\n * Follow wizard set up.\n\nYou are all set and ready to use Sourcebot Dev.\n\n\nCommand to Spin SourceBot Dev Next Time#\n\npodman run -d -p 3000:3000 --pull=always --rm -v $(pwd):/data -e CONFIG_PATH=/data/config.json --name sourcebot ghcr.io/sourcebot-dev/sourcebot:latest\n\n\n * Notice that ':z' is not in the command of the second execution.\n * You run the container in detach mode fo ease of use.\n\nNow You completed the Steps.","routePath":"/blog-software-engineer/Back-End/sourcebot-dev","lang":"","toc":[{"text":"Description.","id":"description","depth":2,"charIndex":-1},{"text":"Run Sourcebot.","id":"run-sourcebot","depth":2,"charIndex":161},{"text":"Command to Spin SourceBot Dev Next Time","id":"command-to-spin-sourcebot-dev-next-time","depth":2,"charIndex":1411}],"domain":"","frontmatter":{"title":"Sourcebot"},"version":""},{"title":"List of Resources","content":"This index aims to highlight different resources on topics where I expanse my\nknowledge, theory and practice.\n\n\nData structures:#\n\n * Youtube channel on data structures\n * Books: Algorithms Illuminated series.\n\n\nDesing patterns:#\n\n * Web. Front End: Patterns dev\n * Book Java: Head first design patterns. (The knowledge here it can be applied\n   to other languages)\n\n\nLibraries and Tools#\n\n * A better dotenvâ€“from the creator of dotenv: DotEnvX\n * View markdown in the terminal MDLess\n * Terminal GUI for Git Lazygit\n * Extend cargo to query cargo crates with command cargo info crate-name, rust\n   crate cargo-info.\n\ncargo install cargo-info\n\n\n * Terminal, Back to the future, FishShell\n\nsudo dnf install fish\n# Enter in fish shell\nfish\n\n\n * Find files with sql like queries FSelect\n * Command line viewer for rustdoc documentation. Rust crate, rusty-man. Note:\n   ahash yanked(outdated) dependency, exploring local builds fix.\n\ncargo install rusty-man\n\n\n * Cheat sheets and search in browser. Search Patterns\n * Terminal multiplexer, become over powered with this gemstone, tmux\n * Create presentations in markdown format and run them from your terminal,\n   presenterm\n * A better way to navigate directories, find files, and launch commands, broot\n * A syntax-highlighting pager for git, diff, and grep output, delta\n * Fast and polyglot tool for code structural search, lint, rewriting at large\n   scale, ast-grep\n * Python development and debugging from eclipse, pydev\n * A modern terminal for the 21st century, rioterm\n * Cheatsheets for the terminal, tealdeer","routePath":"/blog-software-engineer/Resources/index-list","lang":"","toc":[{"text":"Data structures:","id":"data-structures","depth":2,"charIndex":111},{"text":"Desing patterns:","id":"desing-patterns","depth":2,"charIndex":211},{"text":"Libraries and Tools","id":"libraries-and-tools","depth":2,"charIndex":367}],"domain":"","frontmatter":{"title":"List of Resources"},"version":""},{"title":"To Research","content":" * Linux mobile with hub connector, as laptop, experiment.\n * App, divide screen in squares, assign number to each square, write number,\n   move mouse cursor to center of the square, code in rust.\n * App, terminal commad, that executes ls recursively with a flag for depth,\n   show each depth side by side.\n * App, to add and delete spheres of two different colors, given and input of\n   coordinates in xyz and color.","routePath":"/blog-software-engineer/Resources/research-list","lang":"","toc":[],"domain":"","frontmatter":{"title":"To Research"},"version":""},{"title":"Rust Best Practices","content":" * Use pattern matching with match for enums. (Prevent bugs).\n * Use Option and Result types for predictable error handling. (Code safety).\n * Use iter,map, filter for data processing. (Inmutability).\n * Use enum for types with variants. (Type safety).\n * Use trait for shared behaviour in different types. (Polymorphism).\n * Use descriptive names that communicate actions and results as with\n   verb_name_details. (Scale codebase and team work).\n * Use snake_case for variables and functions. (Readability).\n * Use prefix for booleans with is, has, can. (Consistency across environments).\n * Use const, static for inmutability with capital letters. (Consistency).\n * Use complete words and don't use abbreviations. (Teamwork).\n * Declare variables with clear different names. (Maintanability).\n * Define name conventions for your codebase that respect the language\n   conventions. (Adaptability).\n * Use impl to group methods for a type. (Encapsulation).\n * Use From and Into for types conversions. (Flexibility).\n * Use std::borrow:Cow to handle borrowed and owned data. (Clone on Write,\n   useful for Performance).\n * Use std::rc::Rc for reference counting. (Single thread).\n * Use std::sync::Arc for atomic references. (Multi thread).\n * Use std::cell:RefCell for mutability in single thread. (Mutable borrows).\n * Use std::sync::{Arc, Mutex} for thread safe interior mutability. (Prevents\n   data races).\n * Create clear documentation. (Teamwork).\n * Use triple slash for API documentation. (Automation enabler).\n * Update comments when the commented part change. (Consistency).\n * Comment only when explanation add value and answer why? complex questions.\n   (Only useful depencencies).\n * Use TODO comment as a flag to review later. (Code reviews).\n * Use ? for readable error propagation. (Error handling).\n * Use async and await for asynchronous code. (Operations).\n * Use for loops to iterate over collections. (Safer operations).","routePath":"/blog-software-engineer/Rust/rust-best-practices","lang":"","toc":[],"domain":"","frontmatter":{"title":"Rust Best Practices"},"version":""},{"title":"Ollama and Continue Dev","content":"#\n\n\nLinks Resources#\n\n * Ollama\n * Continue\n\n\nOllama install#\n\ncurl -fsSL https://ollama.com/install.sh | sh\n\n\n\nContinue dev, vs code plugin#\n\nollama run models\nollama run llama3:8b\nollama pull nomic-embed-text\n\n\n\nConfiguration file for continue dev#\n\n  \"models\": [\n    {\n      \"title\": \"Llama 3 8B\",\n      \"provider\": \"ollama\",\n      \"model\": \"llama3:8b\"\n    }\n  ],\n  \"tabAutocompleteModel\": {\n    \"title\": \"Llama 3 8B\",\n    \"provider\": \"ollama\",\n    \"model\": \"llama3:8b\"\n  },\n    \"embeddingsProvider\": {\n    \"provider\": \"ollama\",\n    \"model\": \"nomic-embed-text\"\n  }\n\n\nNote: I prefer to use it for non code tasks or very basic boilerplate.\n\nMy real use cases for AI are:\n\n * Questions Creator. Instead of use AI to give me answers, it gives me\n   questions.\n * Enhance my quality question creational process.\n * Play characters from real life or fictional, to obtain their point of view.\n * Enhance my empathical qualities by sharing me different points of view about\n   a situation.\n * PDFs Analyzer.","routePath":"/blog-software-engineer/Tools/ai-local-assistant","lang":"","toc":[{"text":"Links Resources","id":"links-resources","depth":2,"charIndex":3},{"text":"Ollama install","id":"ollama-install","depth":2,"charIndex":45},{"text":"Continue dev, vs code plugin","id":"continue-dev-vs-code-plugin","depth":2,"charIndex":111},{"text":"Configuration file for continue dev","id":"configuration-file-for-continue-dev","depth":2,"charIndex":213}],"domain":"","frontmatter":{"title":"Ollama and Continue Dev"},"version":""},{"title":"Git VCS","content":"Links Resources#\n\n * Git\n * GitHub Cli\n * Gitea\n * Jujutsu\n\n\nGit Install#\n\ncurl -o git.tar.gz https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.26.2.tar.gz\n\n\ngit --version\n\n\n\nGit commands#\n\nInitialize a local Git repository\n\ngit init\n\n\nclone public repository\n\ngit clone [repository-url]\n\n\nClone private repository\n\ngit clone ssh://git@github.com/[username]/[repository-name].git\n\n\nCheck status\n\ngit status\n\n\nAdd a file to the staging area\n\ngit add [file-name]\n\n\nAdd all new and changed files to the staging area\n\ngit add -A\n\n\nCommit changes\n\ngit commit -m \"[commit message]\"\n\n\nRemove a file (or folder)\n\ngit rm -r [file-name.txt]\n\n\nShow current branch\n\ngit branch\n\n\nList of branches\n\ngit branch -a\n\n\nCreate a new branch\n\ngit branch [branch name]\n\n\nDelete a branch\n\ngit branch -d [branch name]\n\n\nDelete a branch forcefully\n\ngit branch -D [branch name]\n\n\nDelete a remote branch\n\ngit push origin --delete [branch name]\n\n\nCreate a new branch and switch to it\n\ngit checkout -b [branch name]\n\n\nClone a remote branch and switch to it\n\ngit checkout -b [branch name] origin/[branch name]\n\n\nRename a local branch\n\ngit branch -m [old branch name] [new branch name]\n\n\nDiscard changes to a file\n\ngit checkout -- [file_name.txt]\n\n\nMerge a branch into the active branch\n\ngit merge [branch name]\n\n\nMerge a branch into a target branch\n\ngit merge [source branch] [target branch]\n\n\nStash changes in a dirty working directory\n\ngit stash\n\n\nRemove all stashed entries\n\ngit stash clear\n\n\nPush a branch to your remote repository\n\ngit push origin [branch name]\n\n\nPush changes to new branch at remote repository\n\ngit push -u origin [branch name]\n\n\nPush changes to remote repository\n\ngit push\n\n\nDelete a remote branch\n\ngit push origin --delete [branch name]\n\n\nUpdate local repository to the newest commit\n\ngit pull\n\n\nPull changes from remote repository\n\ngit pull origin [branch name]\n\n\nAdd a remote repository\n\ngit remote add origin ssh://git@github.com/[username]/[repository-name].git\n\n\nSet a repository's origin branch to SSH\n\ngit remote set-url origin ssh://git@github.com/[username]/[repository-name].git\n\n\nView changes\n\ngit log\n\n\nView detailed changes\n\ngit log --summary\n\n\nView changes, briefly\n\ngit log --oneline\n\n\nPreview changes before merging\n\ngit diff [source branch] [target branch]\n\n\nRevert commit changes\n\ngit revert commitId\n\n\nSet globally Username\n\ngit config --global user.name \"your_username\"\n\n\nSet globally Email id\n\ngit config --global user.email \"your_email_address@example.com\"\t\n\n\nGet global config\n\ngit config --global --list\n\n\n\nGitHUb CLI#\n\nsudo dnf install gh\n\ngh auth login\n\ngh repo clone <repository>\n\n\n\nGitea#\n\nmkdir -p /data/gitea\n\n\n//compose.yml\nversion: '2'\n\nservices:\n  gitea:\n    image: gitea/gitea:latest\n    container_name: gitea\n    environment:\n      - USER_UID=1000\n      - USER_GID=1000\n    volumes:\n      - /data/gitea:/data\n    ports:\n      - \"3000:3000\"\n      - \"222:22\"\n    restart: always\n\n\ndocker-compose --file compose.yaml up -d\n\n\nOr\n\npodman compose --file compose.yaml up --detach\n\n\n\nJujutsu#\n\ncargo binstall --strategies crate-meta-data jj-cli\n\n\nsource <(jj util completion bash)\n\n\nsource <(COMPLETE=bash jj)\n\n\njj git clone [repository-url]\n","routePath":"/blog-software-engineer/Tools/git","lang":"","toc":[{"text":"Links Resources","id":"links-resources","depth":2,"charIndex":-1},{"text":"Git Install","id":"git-install","depth":2,"charIndex":60},{"text":"Git commands","id":"git-commands","depth":2,"charIndex":183},{"text":"GitHUb CLI","id":"github-cli","depth":2,"charIndex":2534},{"text":"Gitea","id":"gitea","depth":2,"charIndex":2613},{"text":"Jujutsu","id":"jujutsu","depth":2,"charIndex":3014}],"domain":"","frontmatter":{"title":"Git VCS"},"version":""},{"title":"Helix","content":"Use case#\n\nCode Editor. Full keyboard. Search. Autocompletions. Suggestions.\n\n\nSet up Helix IDE#\n\nflatpak install flathub com.helix_editor.Helix\n\n\n\nLinks Resources#\n\n * Helix IDE\n * Install languages servers\n * Youtube Video to activate inline suggestions\n * Youtube Video to activate lazygit\n\n\nOpen Helix and Config#\n\nhx\n:config-open\n\n\n\nConfig inline suggestions#\n\n# config.toml\ntheme = \"voxed\"\n\n[editor]\ncolor-modes = true\nend-of-line-diagnostics = \"hint\"\n\n[editor.inline-diagnostics]\ncursor-line = \"warning\"\n\n[editor.lsp]\ndisplay-inlay-hints = true\n\n[keys.normal]\nC-g = [\":new\", \":insert-output lazygit\", \":buffer-close!\", \":redraw\"]\n\n\n\nLanguage Server Protocol#\n\nAfter install of language servers, config in use:\n\n# languages.toml\n[language-server.astro-ls]\ncommand = \"astro-ls\"\nargs = [\"--stdio\"]\nconfig = {typescript = {tsdk = \"/Users/user/.bun/install/global/node_modules/typescript/lib\"}, environment = \"node\"}\n\n[[language]]\nname = \"astro\"\nauto-format = true\nlanguage-servers = [ \"astro-ls\" ]\n\n[[language]]\nname = \"go\"\nauto-format = true\nformatter = { command = \"goimports\" }\n\n[[language]]\nname = \"python\"\nlanguage-servers = [\"pyright\", \"ruff\", \"pylyzer\"]\n[language-server.pyright.config.python.analysis]\ntypeCheckingMode = \"basic\"\n[language-server.ruff]\ncommand = \"ruff\"\nargs = [\"server\"]\n[language-server.pylyzer]\ncommand = \"pylyzer\"\nargs = [\"--server\"]\n\n[language-server.rust-analyzer.config.check]\ncommand = \"clippy\"\n\n[language-server.rust-analyzer.config.cargo]\nfeatures = \"all\"\n\n[language-server.sql-language-server]\ncommand = \"sql-language-server\"\nargs = [\"up\", \"--method\", \"stdio\"]\n\n[[language]]\nname = \"sql\"\nlanguage-servers = [ \"sql-language-server\" ]\n\n[[language]]\nname = \"toml\"\nformatter = { command = \"taplo\", args = [\"fmt\", \"-\"] }\n\n\n\nFeatures Overview#\n\n * Multiple selections\n * Tree-sitter integration\n * Powerful code manipulation\n * Language server support\n * Built in Rust, for the terminal\n * Modern builtin features\n\n\nAdvantage?#\n\nPlug and play, ready to use.","routePath":"/blog-software-engineer/Tools/helix","lang":"","toc":[{"text":"Use case","id":"use-case","depth":2,"charIndex":-1},{"text":"Set up Helix IDE","id":"set-up-helix-ide","depth":2,"charIndex":78},{"text":"Links Resources","id":"links-resources","depth":2,"charIndex":147},{"text":"Open Helix and Config","id":"open-helix-and-config","depth":2,"charIndex":294},{"text":"Config inline suggestions","id":"config-inline-suggestions","depth":2,"charIndex":337},{"text":"Language Server Protocol","id":"language-server-protocol","depth":2,"charIndex":639},{"text":"Features Overview","id":"features-overview","depth":2,"charIndex":1755},{"text":"Advantage?","id":"advantage","depth":2,"charIndex":1946}],"domain":"","frontmatter":{"title":"Helix"},"version":""},{"title":"Meld Merge","content":"Use case#\n\nCompare and merge files, folders, and repositories.\n\n\nLink Resources#\n\nMeld Merge\n\n\nInstall#\n\nBy software manager linux.\n\n\nCompatibility#\n\nLinux, Mac, WIndows.","routePath":"/blog-software-engineer/Tools/meld-merge","lang":"","toc":[{"text":"Use case","id":"use-case","depth":2,"charIndex":-1},{"text":"Link Resources","id":"link-resources","depth":2,"charIndex":64},{"text":"Install","id":"install","depth":2,"charIndex":94},{"text":"Compatibility","id":"compatibility","depth":2,"charIndex":133}],"domain":"","frontmatter":{"title":"Meld Merge"},"version":""},{"title":"Snippets","content":"Watermark images#\n\n// watermark.sh\n#!/bin/#!/bin/bash\nfor i in ./*; do\n    composite -dissolve 55% -gravity Center -quality 100 logo.png \"$i\" \"results/$(echo $i | cut -d '/' -f 2)\"\ndone\n\n\nCreate the file watermark.sh, inside the folder, and create folder results,\ninside the same folder, excute file with sh watermark.sh, replace logo.png with\nyour logo.\n\n\nOpen source calendar#\n\n * Use from the terminal with broot, read thread List of Resources\n * Execute: sh calendar-next-ten-years.sh\n * It wil create a folder structure for your next ten years with twelve months,\n   the according days, and 24 md files one per hour inside the folder of the\n   day, enabling you to add events to your calendar.\n\n# calendar-next-ten-years.sh\n#!/bin/bash\n\n# Get the current year\nCURRENT_YEAR=$(date +%Y)\nEND_YEAR=$((CURRENT_YEAR + 10))\n\nfor YEAR in $(seq $CURRENT_YEAR $END_YEAR); do\n    for MONTH in $(seq -w 01 12); do\n        for DAY in $(seq -w 01 31); do\n            # Calculate the date\n            DATE=\"$YEAR-$MONTH-$DAY\"\n            # Check if the date is valid\n            if date -d \"$DATE\" >/dev/null 2>&1; then\n                # Get the day of the week (e.g., Monday)\n                DAY_OF_WEEK=$(date -d \"$DATE\" +%A)\n                # Create the directory structure\n                mkdir -p \"$YEAR/$MONTH/$DAY-$DAY_OF_WEEK\"\n                for HOUR in $(seq -w 00 23)\n                do\n                    # Create the twenty four md files, one per hour.\n                    touch \"$YEAR/$MONTH/$DAY-$DAY_OF_WEEK/$HOUR.md\"\n                done\n            fi\n        done\n    done\ndone\n\n","routePath":"/blog-software-engineer/Tools/snippets","lang":"","toc":[{"text":"Watermark images","id":"watermark-images","depth":2,"charIndex":-1},{"text":"Open source calendar","id":"open-source-calendar","depth":2,"charIndex":356}],"domain":"","frontmatter":{"title":"Snippets"},"version":""},{"title":"About","content":"#\n\nPlantacerium, Senior Software Engineer, I am writing in deep articles and\nenhancing my mastery exponentially at Rust, and Reactjs.\n\n * Highlighted Skills: Git, GitHub, Github Actions, Linux Commands, VSCode,\n   Helix IDE, Rust, Cargo, Toml, Javascript, Typescript, HTML, CSS, SASS,\n   Reactjs, Nextjs, Tanstack, Zustand, Redux, React Testing, Astro, Gsap,\n   Animejs, Bootstrap, Material UI, Radix UI, D3, Nodejs, API Rest, Swagger,\n   GraphQL, Better Auth, Postman, Debug, Web Deployments, Docker, Podman.\n * Based in Europe.\n * Remote worker.\n * Full time position.\n\n\nPortfolio#\n\nThis is my digital star guide, to nurture and growth the flame of wonder and\nknowledge for software engineering.\n\n\nContact Plantacerium, Community Pandacinamics#\n\nDiscord invitation","routePath":"/blog-software-engineer/","lang":"","toc":[{"text":"Portfolio","id":"portfolio","depth":2,"charIndex":572},{"text":"Contact Plantacerium, Community Pandacinamics","id":"contact-plantacerium-community-pandacinamics","depth":2,"charIndex":699}],"domain":"","frontmatter":{},"version":""}]